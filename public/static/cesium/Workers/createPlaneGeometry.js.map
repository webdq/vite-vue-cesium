{"version":3,"file":"createPlaneGeometry.js","sources":["../../../../Source/Core/PlaneGeometry.js","../../../../Source/WorkersES6/createPlaneGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\n/**\r\n * Describes geometry representing a plane centered at the origin, with a unit width and length.\r\n *\r\n * @alias PlaneGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @example\r\n * const planeGeometry = new Cesium.PlaneGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n * });\r\n */\r\nfunction PlaneGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n  this._vertexFormat = vertexFormat;\r\n  this._workerName = \"createPlaneGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nPlaneGeometry.packedLength = VertexFormat.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PlaneGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPlaneGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  vertexFormat: scratchVertexFormat,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PlaneGeometry} [result] The object into which to store the result.\r\n * @returns {PlaneGeometry} The modified result parameter or a new PlaneGeometry instance if one was not provided.\r\n */\r\nPlaneGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n\r\n  if (!defined(result)) {\r\n    return new PlaneGeometry(scratchOptions);\r\n  }\r\n\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n\r\n  return result;\r\n};\r\n\r\nconst min = new Cartesian3(-0.5, -0.5, 0.0);\r\nconst max = new Cartesian3(0.5, 0.5, 0.0);\r\n\r\n/**\r\n * Computes the geometric representation of a plane, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PlaneGeometry} planeGeometry A description of the plane.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPlaneGeometry.createGeometry = function (planeGeometry) {\r\n  const vertexFormat = planeGeometry._vertexFormat;\r\n\r\n  const attributes = new GeometryAttributes();\r\n  let indices;\r\n  let positions;\r\n\r\n  if (vertexFormat.position) {\r\n    // 4 corner points.  Duplicated 3 times each for each incident edge/face.\r\n    positions = new Float64Array(4 * 3);\r\n\r\n    // +z face\r\n    positions[0] = min.x;\r\n    positions[1] = min.y;\r\n    positions[2] = 0.0;\r\n    positions[3] = max.x;\r\n    positions[4] = min.y;\r\n    positions[5] = 0.0;\r\n    positions[6] = max.x;\r\n    positions[7] = max.y;\r\n    positions[8] = 0.0;\r\n    positions[9] = min.x;\r\n    positions[10] = max.y;\r\n    positions[11] = 0.0;\r\n\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    });\r\n\r\n    if (vertexFormat.normal) {\r\n      const normals = new Float32Array(4 * 3);\r\n\r\n      // +z face\r\n      normals[0] = 0.0;\r\n      normals[1] = 0.0;\r\n      normals[2] = 1.0;\r\n      normals[3] = 0.0;\r\n      normals[4] = 0.0;\r\n      normals[5] = 1.0;\r\n      normals[6] = 0.0;\r\n      normals[7] = 0.0;\r\n      normals[8] = 1.0;\r\n      normals[9] = 0.0;\r\n      normals[10] = 0.0;\r\n      normals[11] = 1.0;\r\n\r\n      attributes.normal = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normals,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n      const texCoords = new Float32Array(4 * 2);\r\n\r\n      // +z face\r\n      texCoords[0] = 0.0;\r\n      texCoords[1] = 0.0;\r\n      texCoords[2] = 1.0;\r\n      texCoords[3] = 0.0;\r\n      texCoords[4] = 1.0;\r\n      texCoords[5] = 1.0;\r\n      texCoords[6] = 0.0;\r\n      texCoords[7] = 1.0;\r\n\r\n      attributes.st = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: texCoords,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      const tangents = new Float32Array(4 * 3);\r\n\r\n      // +z face\r\n      tangents[0] = 1.0;\r\n      tangents[1] = 0.0;\r\n      tangents[2] = 0.0;\r\n      tangents[3] = 1.0;\r\n      tangents[4] = 0.0;\r\n      tangents[5] = 0.0;\r\n      tangents[6] = 1.0;\r\n      tangents[7] = 0.0;\r\n      tangents[8] = 0.0;\r\n      tangents[9] = 1.0;\r\n      tangents[10] = 0.0;\r\n      tangents[11] = 0.0;\r\n\r\n      attributes.tangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: tangents,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      const bitangents = new Float32Array(4 * 3);\r\n\r\n      // +z face\r\n      bitangents[0] = 0.0;\r\n      bitangents[1] = 1.0;\r\n      bitangents[2] = 0.0;\r\n      bitangents[3] = 0.0;\r\n      bitangents[4] = 1.0;\r\n      bitangents[5] = 0.0;\r\n      bitangents[6] = 0.0;\r\n      bitangents[7] = 1.0;\r\n      bitangents[8] = 0.0;\r\n      bitangents[9] = 0.0;\r\n      bitangents[10] = 1.0;\r\n      bitangents[11] = 0.0;\r\n\r\n      attributes.bitangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: bitangents,\r\n      });\r\n    }\r\n\r\n    // 2 triangles\r\n    indices = new Uint16Array(2 * 3);\r\n\r\n    // +z face\r\n    indices[0] = 0;\r\n    indices[1] = 1;\r\n    indices[2] = 2;\r\n    indices[3] = 0;\r\n    indices[4] = 2;\r\n    indices[5] = 3;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\r\n  });\r\n};\r\nexport default PlaneGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport PlaneGeometry from \"../Core/PlaneGeometry.js\";\r\n\r\nfunction createPlaneGeometry(planeGeometry, offset) {\r\n  if (defined(offset)) {\r\n    planeGeometry = PlaneGeometry.unpack(planeGeometry, offset);\r\n  }\r\n  return PlaneGeometry.createGeometry(planeGeometry);\r\n}\r\nexport default createPlaneGeometry;\r\n"],"names":["PlaneGeometry","options","defaultValue","EMPTY_OBJECT","vertexFormat","VertexFormat","DEFAULT","this","_vertexFormat","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","defined","scratchVertexFormat","scratchOptions","unpack","result","clone","min","Cartesian3","max","createGeometry","planeGeometry","attributes","GeometryAttributes","indices","positions","position","Float64Array","x","y","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","normal","normals","Float32Array","FLOAT","st","texCoords","tangent","tangents","bitangent","bitangents","Uint16Array","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","ZERO","Math","sqrt","offset"],"mappings":"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"}