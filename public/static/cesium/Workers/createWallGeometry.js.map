{"version":3,"file":"createWallGeometry.js","sources":["../../../../Source/Core/WallGeometry.js","../../../../Source/WorkersES6/createWallGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\nimport WallGeometryLibrary from \"./WallGeometryLibrary.js\";\r\n\r\nconst scratchCartesian3Position1 = new Cartesian3();\r\nconst scratchCartesian3Position2 = new Cartesian3();\r\nconst scratchCartesian3Position4 = new Cartesian3();\r\nconst scratchCartesian3Position5 = new Cartesian3();\r\nconst scratchBitangent = new Cartesian3();\r\nconst scratchTangent = new Cartesian3();\r\nconst scratchNormal = new Cartesian3();\r\n\r\n/**\r\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n *\r\n * @alias WallGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number[]} [options.maximumHeights] An array parallel to <code>positions</code> that give the maximum height of the\r\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n * @param {Number[]} [options.minimumHeights] An array parallel to <code>positions</code> that give the minimum height of the\r\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} positions length must be greater than or equal to 2.\r\n * @exception {DeveloperError} positions and maximumHeights must have the same length.\r\n * @exception {DeveloperError} positions and minimumHeights must have the same length.\r\n *\r\n * @see WallGeometry#createGeometry\r\n * @see WallGeometry#fromConstantHeight\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Wall.html|Cesium Sandcastle Wall Demo}\r\n *\r\n * @example\r\n * // create a wall that spans from ground level to 10000 meters\r\n * const wall = new Cesium.WallGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArrayHeights([\r\n *     19.0, 47.0, 10000.0,\r\n *     19.0, 48.0, 10000.0,\r\n *     20.0, 48.0, 10000.0,\r\n *     20.0, 47.0, 10000.0,\r\n *     19.0, 47.0, 10000.0\r\n *   ])\r\n * });\r\n * const geometry = Cesium.WallGeometry.createGeometry(wall);\r\n */\r\nfunction WallGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  const wallPositions = options.positions;\r\n  const maximumHeights = options.maximumHeights;\r\n  const minimumHeights = options.minimumHeights;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(wallPositions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  if (\r\n    defined(maximumHeights) &&\r\n    maximumHeights.length !== wallPositions.length\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"options.positions and options.maximumHeights must have the same length.\"\r\n    );\r\n  }\r\n  if (\r\n    defined(minimumHeights) &&\r\n    minimumHeights.length !== wallPositions.length\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"options.positions and options.minimumHeights must have the same length.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n  const granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n  this._positions = wallPositions;\r\n  this._minimumHeights = minimumHeights;\r\n  this._maximumHeights = maximumHeights;\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._granularity = granularity;\r\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n  this._workerName = \"createWallGeometry\";\r\n\r\n  let numComponents = 1 + wallPositions.length * Cartesian3.packedLength + 2;\r\n  if (defined(minimumHeights)) {\r\n    numComponents += minimumHeights.length;\r\n  }\r\n  if (defined(maximumHeights)) {\r\n    numComponents += maximumHeights.length;\r\n  }\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 1;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {WallGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nWallGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  const positions = value._positions;\r\n  let length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  const minimumHeights = value._minimumHeights;\r\n  length = defined(minimumHeights) ? minimumHeights.length : 0;\r\n  array[startingIndex++] = length;\r\n\r\n  if (defined(minimumHeights)) {\r\n    for (i = 0; i < length; ++i) {\r\n      array[startingIndex++] = minimumHeights[i];\r\n    }\r\n  }\r\n\r\n  const maximumHeights = value._maximumHeights;\r\n  length = defined(maximumHeights) ? maximumHeights.length : 0;\r\n  array[startingIndex++] = length;\r\n\r\n  if (defined(maximumHeights)) {\r\n    for (i = 0; i < length; ++i) {\r\n      array[startingIndex++] = maximumHeights[i];\r\n    }\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  positions: undefined,\r\n  minimumHeights: undefined,\r\n  maximumHeights: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {WallGeometry} [result] The object into which to store the result.\r\n * @returns {WallGeometry} The modified result parameter or a new WallGeometry instance if one was not provided.\r\n */\r\nWallGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  let length = array[startingIndex++];\r\n  const positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  let minimumHeights;\r\n\r\n  if (length > 0) {\r\n    minimumHeights = new Array(length);\r\n    for (i = 0; i < length; ++i) {\r\n      minimumHeights[i] = array[startingIndex++];\r\n    }\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  let maximumHeights;\r\n\r\n  if (length > 0) {\r\n    maximumHeights = new Array(length);\r\n    for (i = 0; i < length; ++i) {\r\n      maximumHeights[i] = array[startingIndex++];\r\n    }\r\n  }\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.minimumHeights = minimumHeights;\r\n    scratchOptions.maximumHeights = maximumHeights;\r\n    scratchOptions.granularity = granularity;\r\n    return new WallGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._minimumHeights = minimumHeights;\r\n  result._maximumHeights = maximumHeights;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * A description of a wall, which is similar to a KML line string. A wall is defined by a series of points,\r\n * which extrude down to the ground. Optionally, they can extrude downwards to a specified height.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of Cartesian objects, which are the points of the wall.\r\n * @param {Number} [options.maximumHeight] A constant that defines the maximum height of the\r\n *        wall at <code>positions</code>. If undefined, the height of each position in used.\r\n * @param {Number} [options.minimumHeight] A constant that defines the minimum height of the\r\n *        wall at <code>positions</code>. If undefined, the height at each position is 0.0.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid for coordinate manipulation\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @returns {WallGeometry}\r\n *\r\n *\r\n * @example\r\n * // create a wall that spans from 10000 meters to 20000 meters\r\n * const wall = Cesium.WallGeometry.fromConstantHeights({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     19.0, 47.0,\r\n *     19.0, 48.0,\r\n *     20.0, 48.0,\r\n *     20.0, 47.0,\r\n *     19.0, 47.0,\r\n *   ]),\r\n *   minimumHeight : 20000.0,\r\n *   maximumHeight : 10000.0\r\n * });\r\n * const geometry = Cesium.WallGeometry.createGeometry(wall);\r\n *\r\n * @see WallGeometry#createGeometry\r\n */\r\nWallGeometry.fromConstantHeights = function (options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const positions = options.positions;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  let minHeights;\r\n  let maxHeights;\r\n\r\n  const min = options.minimumHeight;\r\n  const max = options.maximumHeight;\r\n\r\n  const doMin = defined(min);\r\n  const doMax = defined(max);\r\n  if (doMin || doMax) {\r\n    const length = positions.length;\r\n    minHeights = doMin ? new Array(length) : undefined;\r\n    maxHeights = doMax ? new Array(length) : undefined;\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      if (doMin) {\r\n        minHeights[i] = min;\r\n      }\r\n\r\n      if (doMax) {\r\n        maxHeights[i] = max;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newOptions = {\r\n    positions: positions,\r\n    maximumHeights: maxHeights,\r\n    minimumHeights: minHeights,\r\n    ellipsoid: options.ellipsoid,\r\n    vertexFormat: options.vertexFormat,\r\n  };\r\n  return new WallGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a wall, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {WallGeometry} wallGeometry A description of the wall.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nWallGeometry.createGeometry = function (wallGeometry) {\r\n  const wallPositions = wallGeometry._positions;\r\n  const minimumHeights = wallGeometry._minimumHeights;\r\n  const maximumHeights = wallGeometry._maximumHeights;\r\n  const vertexFormat = wallGeometry._vertexFormat;\r\n  const granularity = wallGeometry._granularity;\r\n  const ellipsoid = wallGeometry._ellipsoid;\r\n\r\n  const pos = WallGeometryLibrary.computePositions(\r\n    ellipsoid,\r\n    wallPositions,\r\n    maximumHeights,\r\n    minimumHeights,\r\n    granularity,\r\n    true\r\n  );\r\n  if (!defined(pos)) {\r\n    return;\r\n  }\r\n\r\n  const bottomPositions = pos.bottomPositions;\r\n  const topPositions = pos.topPositions;\r\n  const numCorners = pos.numCorners;\r\n\r\n  let length = topPositions.length;\r\n  let size = length * 2;\r\n\r\n  const positions = vertexFormat.position ? new Float64Array(size) : undefined;\r\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n  const bitangents = vertexFormat.bitangent\r\n    ? new Float32Array(size)\r\n    : undefined;\r\n  const textureCoordinates = vertexFormat.st\r\n    ? new Float32Array((size / 3) * 2)\r\n    : undefined;\r\n\r\n  let positionIndex = 0;\r\n  let normalIndex = 0;\r\n  let bitangentIndex = 0;\r\n  let tangentIndex = 0;\r\n  let stIndex = 0;\r\n\r\n  // add lower and upper points one after the other, lower\r\n  // points being even and upper points being odd\r\n  let normal = scratchNormal;\r\n  let tangent = scratchTangent;\r\n  let bitangent = scratchBitangent;\r\n  let recomputeNormal = true;\r\n  length /= 3;\r\n  let i;\r\n  let s = 0;\r\n  const ds = 1 / (length - numCorners - 1);\r\n  for (i = 0; i < length; ++i) {\r\n    const i3 = i * 3;\r\n    const topPosition = Cartesian3.fromArray(\r\n      topPositions,\r\n      i3,\r\n      scratchCartesian3Position1\r\n    );\r\n    const bottomPosition = Cartesian3.fromArray(\r\n      bottomPositions,\r\n      i3,\r\n      scratchCartesian3Position2\r\n    );\r\n    if (vertexFormat.position) {\r\n      // insert the lower point\r\n      positions[positionIndex++] = bottomPosition.x;\r\n      positions[positionIndex++] = bottomPosition.y;\r\n      positions[positionIndex++] = bottomPosition.z;\r\n\r\n      // insert the upper point\r\n      positions[positionIndex++] = topPosition.x;\r\n      positions[positionIndex++] = topPosition.y;\r\n      positions[positionIndex++] = topPosition.z;\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n      textureCoordinates[stIndex++] = s;\r\n      textureCoordinates[stIndex++] = 0.0;\r\n\r\n      textureCoordinates[stIndex++] = s;\r\n      textureCoordinates[stIndex++] = 1.0;\r\n    }\r\n\r\n    if (vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent) {\r\n      let nextTop = Cartesian3.clone(\r\n        Cartesian3.ZERO,\r\n        scratchCartesian3Position5\r\n      );\r\n      const groundPosition = Cartesian3.subtract(\r\n        topPosition,\r\n        ellipsoid.geodeticSurfaceNormal(\r\n          topPosition,\r\n          scratchCartesian3Position2\r\n        ),\r\n        scratchCartesian3Position2\r\n      );\r\n      if (i + 1 < length) {\r\n        nextTop = Cartesian3.fromArray(\r\n          topPositions,\r\n          i3 + 3,\r\n          scratchCartesian3Position5\r\n        );\r\n      }\r\n\r\n      if (recomputeNormal) {\r\n        const scalednextPosition = Cartesian3.subtract(\r\n          nextTop,\r\n          topPosition,\r\n          scratchCartesian3Position4\r\n        );\r\n        const scaledGroundPosition = Cartesian3.subtract(\r\n          groundPosition,\r\n          topPosition,\r\n          scratchCartesian3Position1\r\n        );\r\n        normal = Cartesian3.normalize(\r\n          Cartesian3.cross(scaledGroundPosition, scalednextPosition, normal),\r\n          normal\r\n        );\r\n        recomputeNormal = false;\r\n      }\r\n\r\n      if (\r\n        Cartesian3.equalsEpsilon(topPosition, nextTop, CesiumMath.EPSILON10)\r\n      ) {\r\n        recomputeNormal = true;\r\n      } else {\r\n        s += ds;\r\n        if (vertexFormat.tangent) {\r\n          tangent = Cartesian3.normalize(\r\n            Cartesian3.subtract(nextTop, topPosition, tangent),\r\n            tangent\r\n          );\r\n        }\r\n        if (vertexFormat.bitangent) {\r\n          bitangent = Cartesian3.normalize(\r\n            Cartesian3.cross(normal, tangent, bitangent),\r\n            bitangent\r\n          );\r\n        }\r\n      }\r\n\r\n      if (vertexFormat.normal) {\r\n        normals[normalIndex++] = normal.x;\r\n        normals[normalIndex++] = normal.y;\r\n        normals[normalIndex++] = normal.z;\r\n\r\n        normals[normalIndex++] = normal.x;\r\n        normals[normalIndex++] = normal.y;\r\n        normals[normalIndex++] = normal.z;\r\n      }\r\n\r\n      if (vertexFormat.tangent) {\r\n        tangents[tangentIndex++] = tangent.x;\r\n        tangents[tangentIndex++] = tangent.y;\r\n        tangents[tangentIndex++] = tangent.z;\r\n\r\n        tangents[tangentIndex++] = tangent.x;\r\n        tangents[tangentIndex++] = tangent.y;\r\n        tangents[tangentIndex++] = tangent.z;\r\n      }\r\n\r\n      if (vertexFormat.bitangent) {\r\n        bitangents[bitangentIndex++] = bitangent.x;\r\n        bitangents[bitangentIndex++] = bitangent.y;\r\n        bitangents[bitangentIndex++] = bitangent.z;\r\n\r\n        bitangents[bitangentIndex++] = bitangent.x;\r\n        bitangents[bitangentIndex++] = bitangent.y;\r\n        bitangents[bitangentIndex++] = bitangent.z;\r\n      }\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes();\r\n\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.normal) {\r\n    attributes.normal = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: normals,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.tangent) {\r\n    attributes.tangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: tangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.bitangent) {\r\n    attributes.bitangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: bitangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: textureCoordinates,\r\n    });\r\n  }\r\n\r\n  // prepare the side walls, two triangles for each wall\r\n  //\r\n  //    A (i+1)  B (i+3) E\r\n  //    +--------+-------+\r\n  //    |      / |      /|    triangles:  A C B\r\n  //    |     /  |     / |                B C D\r\n  //    |    /   |    /  |\r\n  //    |   /    |   /   |\r\n  //    |  /     |  /    |\r\n  //    | /      | /     |\r\n  //    +--------+-------+\r\n  //    C (i)    D (i+2) F\r\n  //\r\n\r\n  const numVertices = size / 3;\r\n  size -= 6 * (numCorners + 1);\r\n  const indices = IndexDatatype.createTypedArray(numVertices, size);\r\n\r\n  let edgeIndex = 0;\r\n  for (i = 0; i < numVertices - 2; i += 2) {\r\n    const LL = i;\r\n    const LR = i + 2;\r\n    const pl = Cartesian3.fromArray(\r\n      positions,\r\n      LL * 3,\r\n      scratchCartesian3Position1\r\n    );\r\n    const pr = Cartesian3.fromArray(\r\n      positions,\r\n      LR * 3,\r\n      scratchCartesian3Position2\r\n    );\r\n    if (Cartesian3.equalsEpsilon(pl, pr, CesiumMath.EPSILON10)) {\r\n      continue;\r\n    }\r\n    const UL = i + 1;\r\n    const UR = i + 3;\r\n\r\n    indices[edgeIndex++] = UL;\r\n    indices[edgeIndex++] = LL;\r\n    indices[edgeIndex++] = UR;\r\n    indices[edgeIndex++] = UR;\r\n    indices[edgeIndex++] = LL;\r\n    indices[edgeIndex++] = LR;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: new BoundingSphere.fromVertices(positions),\r\n  });\r\n};\r\nexport default WallGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport WallGeometry from \"../Core/WallGeometry.js\";\r\n\r\nfunction createWallGeometry(wallGeometry, offset) {\r\n  if (defined(offset)) {\r\n    wallGeometry = WallGeometry.unpack(wallGeometry, offset);\r\n  }\r\n  wallGeometry._ellipsoid = Ellipsoid.clone(wallGeometry._ellipsoid);\r\n  return WallGeometry.createGeometry(wallGeometry);\r\n}\r\nexport default createWallGeometry;\r\n"],"names":["scratchCartesian3Position1","Cartesian3","scratchCartesian3Position2","scratchCartesian3Position4","scratchCartesian3Position5","scratchBitangent","scratchTangent","scratchNormal","WallGeometry","options","wallPositions","defaultValue","EMPTY_OBJECT","positions","maximumHeights","minimumHeights","defined","DeveloperError","length","vertexFormat","VertexFormat","DEFAULT","granularity","CesiumMath","RADIANS_PER_DEGREE","ellipsoid","Ellipsoid","WGS84","this","_positions","_minimumHeights","_maximumHeights","_vertexFormat","clone","_granularity","_ellipsoid","_workerName","numComponents","packedLength","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","fromConstantHeights","minHeights","maxHeights","min","minimumHeight","max","maximumHeight","doMin","doMax","createGeometry","wallGeometry","pos","WallGeometryLibrary","computePositions","bottomPositions","topPositions","numCorners","size","position","Float64Array","normals","normal","Float32Array","tangents","tangent","bitangents","bitangent","textureCoordinates","st","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","recomputeNormal","s","ds","i3","topPosition","fromArray","bottomPosition","x","y","z","nextTop","ZERO","groundPosition","subtract","geodeticSurfaceNormal","scalednextPosition","scaledGroundPosition","normalize","cross","equalsEpsilon","EPSILON10","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","numVertices","indices","IndexDatatype","createTypedArray","edgeIndex","LL","LR","pl","pr","UL","UR","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromVertices","offset"],"mappings":"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"}