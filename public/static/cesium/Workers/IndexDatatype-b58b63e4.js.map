{"version":3,"file":"IndexDatatype-b58b63e4.js","sources":["../../../../Source/Core/IndexDatatype.js"],"sourcesContent":["import defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport WebGLConstants from \"./WebGLConstants.js\";\r\n\r\n/**\r\n * Constants for WebGL index datatypes.  These corresponds to the\r\n * <code>type</code> parameter of {@link http://www.khronos.org/opengles/sdk/docs/man/xhtml/glDrawElements.xml|drawElements}.\r\n *\r\n * @enum {Number}\r\n */\r\nconst IndexDatatype = {\r\n  /**\r\n   * 8-bit unsigned byte corresponding to <code>UNSIGNED_BYTE</code> and the type\r\n   * of an element in <code>Uint8Array</code>.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  UNSIGNED_BYTE: WebGLConstants.UNSIGNED_BYTE,\r\n\r\n  /**\r\n   * 16-bit unsigned short corresponding to <code>UNSIGNED_SHORT</code> and the type\r\n   * of an element in <code>Uint16Array</code>.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  UNSIGNED_SHORT: WebGLConstants.UNSIGNED_SHORT,\r\n\r\n  /**\r\n   * 32-bit unsigned int corresponding to <code>UNSIGNED_INT</code> and the type\r\n   * of an element in <code>Uint32Array</code>.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  UNSIGNED_INT: WebGLConstants.UNSIGNED_INT,\r\n};\r\n\r\n/**\r\n * Returns the size, in bytes, of the corresponding datatype.\r\n *\r\n * @param {IndexDatatype} indexDatatype The index datatype to get the size of.\r\n * @returns {Number} The size in bytes.\r\n *\r\n * @example\r\n * // Returns 2\r\n * const size = Cesium.IndexDatatype.getSizeInBytes(Cesium.IndexDatatype.UNSIGNED_SHORT);\r\n */\r\nIndexDatatype.getSizeInBytes = function (indexDatatype) {\r\n  switch (indexDatatype) {\r\n    case IndexDatatype.UNSIGNED_BYTE:\r\n      return Uint8Array.BYTES_PER_ELEMENT;\r\n    case IndexDatatype.UNSIGNED_SHORT:\r\n      return Uint16Array.BYTES_PER_ELEMENT;\r\n    case IndexDatatype.UNSIGNED_INT:\r\n      return Uint32Array.BYTES_PER_ELEMENT;\r\n  }\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  throw new DeveloperError(\r\n    \"indexDatatype is required and must be a valid IndexDatatype constant.\"\r\n  );\r\n  //>>includeEnd('debug');\r\n};\r\n\r\n/**\r\n * Gets the datatype with a given size in bytes.\r\n *\r\n * @param {Number} sizeInBytes The size of a single index in bytes.\r\n * @returns {IndexDatatype} The index datatype with the given size.\r\n */\r\nIndexDatatype.fromSizeInBytes = function (sizeInBytes) {\r\n  switch (sizeInBytes) {\r\n    case 2:\r\n      return IndexDatatype.UNSIGNED_SHORT;\r\n    case 4:\r\n      return IndexDatatype.UNSIGNED_INT;\r\n    case 1:\r\n      return IndexDatatype.UNSIGNED_BYTE;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\r\n        \"Size in bytes cannot be mapped to an IndexDatatype\"\r\n      );\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Validates that the provided index datatype is a valid {@link IndexDatatype}.\r\n *\r\n * @param {IndexDatatype} indexDatatype The index datatype to validate.\r\n * @returns {Boolean} <code>true</code> if the provided index datatype is a valid value; otherwise, <code>false</code>.\r\n *\r\n * @example\r\n * if (!Cesium.IndexDatatype.validate(indexDatatype)) {\r\n *   throw new Cesium.DeveloperError('indexDatatype must be a valid value.');\r\n * }\r\n */\r\nIndexDatatype.validate = function (indexDatatype) {\r\n  return (\r\n    defined(indexDatatype) &&\r\n    (indexDatatype === IndexDatatype.UNSIGNED_BYTE ||\r\n      indexDatatype === IndexDatatype.UNSIGNED_SHORT ||\r\n      indexDatatype === IndexDatatype.UNSIGNED_INT)\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a typed array that will store indices, using either <code><Uint16Array</code>\r\n * or <code>Uint32Array</code> depending on the number of vertices.\r\n *\r\n * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n * @param {Number|Array} indicesLengthOrArray Passed through to the typed array constructor.\r\n * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>indicesLengthOrArray</code>.\r\n *\r\n * @example\r\n * this.indices = Cesium.IndexDatatype.createTypedArray(positions.length / 3, numberOfIndices);\r\n */\r\nIndexDatatype.createTypedArray = function (\r\n  numberOfVertices,\r\n  indicesLengthOrArray\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(numberOfVertices)) {\r\n    throw new DeveloperError(\"numberOfVertices is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n    return new Uint32Array(indicesLengthOrArray);\r\n  }\r\n\r\n  return new Uint16Array(indicesLengthOrArray);\r\n};\r\n\r\n/**\r\n * Creates a typed array from a source array buffer.  The resulting typed array will store indices, using either <code><Uint16Array</code>\r\n * or <code>Uint32Array</code> depending on the number of vertices.\r\n *\r\n * @param {Number} numberOfVertices Number of vertices that the indices will reference.\r\n * @param {ArrayBuffer} sourceArray Passed through to the typed array constructor.\r\n * @param {Number} byteOffset Passed through to the typed array constructor.\r\n * @param {Number} length Passed through to the typed array constructor.\r\n * @returns {Uint16Array|Uint32Array} A <code>Uint16Array</code> or <code>Uint32Array</code> constructed with <code>sourceArray</code>, <code>byteOffset</code>, and <code>length</code>.\r\n *\r\n */\r\nIndexDatatype.createTypedArrayFromArrayBuffer = function (\r\n  numberOfVertices,\r\n  sourceArray,\r\n  byteOffset,\r\n  length\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(numberOfVertices)) {\r\n    throw new DeveloperError(\"numberOfVertices is required.\");\r\n  }\r\n  if (!defined(sourceArray)) {\r\n    throw new DeveloperError(\"sourceArray is required.\");\r\n  }\r\n  if (!defined(byteOffset)) {\r\n    throw new DeveloperError(\"byteOffset is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (numberOfVertices >= CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n    return new Uint32Array(sourceArray, byteOffset, length);\r\n  }\r\n\r\n  return new Uint16Array(sourceArray, byteOffset, length);\r\n};\r\n\r\n/**\r\n * Gets the {@link IndexDatatype} for the provided TypedArray instance.\r\n *\r\n * @param {Uint8Array|Uint16Array|Uint32Array} array The typed array.\r\n * @returns {IndexDatatype} The IndexDatatype for the provided array, or undefined if the array is not a Uint8Array, Uint16Array, or Uint32Array.\r\n */\r\nIndexDatatype.fromTypedArray = function (array) {\r\n  if (array instanceof Uint8Array) {\r\n    return IndexDatatype.UNSIGNED_BYTE;\r\n  }\r\n  if (array instanceof Uint16Array) {\r\n    return IndexDatatype.UNSIGNED_SHORT;\r\n  }\r\n  if (array instanceof Uint32Array) {\r\n    return IndexDatatype.UNSIGNED_INT;\r\n  }\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  throw new DeveloperError(\r\n    \"array must be a Uint8Array, Uint16Array, or Uint32Array.\"\r\n  );\r\n  //>>includeEnd('debug');\r\n};\r\n\r\nexport default Object.freeze(IndexDatatype);\r\n"],"names":["IndexDatatype","UNSIGNED_BYTE","WebGLConstants","UNSIGNED_SHORT","UNSIGNED_INT","indexDatatype","Uint8Array","BYTES_PER_ELEMENT","Uint16Array","Uint32Array","DeveloperError","sizeInBytes","defined","numberOfVertices","indicesLengthOrArray","CesiumMath","SIXTY_FOUR_KILOBYTES","sourceArray","byteOffset","length","array","IndexDatatype$1","Object","freeze"],"mappings":"oKAWA,MAAMA,EAAgB,CAQpBC,cAAeC,EAAcA,eAACD,cAS9BE,eAAgBD,EAAcA,eAACC,eAS/BC,aAAcF,EAAcA,eAACE,aAa/BJ,eAA+B,SAAUK,GACvC,OAAQA,GACN,KAAKL,EAAcC,cACjB,OAAOK,WAAWC,kBACpB,KAAKP,EAAcG,eACjB,OAAOK,YAAYD,kBACrB,KAAKP,EAAcI,aACjB,OAAOK,YAAYF,kBAIvB,MAAM,IAAIG,EAAcA,eACtB,0EAWJV,gBAAgC,SAAUW,GACxC,OAAQA,GACN,KAAK,EACH,OAAOX,EAAcG,eACvB,KAAK,EACH,OAAOH,EAAcI,aACvB,KAAK,EACH,OAAOJ,EAAcC,cAEvB,QACE,MAAM,IAAIS,EAAcA,eACtB,wDAiBRV,SAAyB,SAAUK,GACjC,OACEO,EAAAA,QAAQP,KACPA,IAAkBL,EAAcC,eAC/BI,IAAkBL,EAAcG,gBAChCE,IAAkBL,EAAcI,eAetCJ,iBAAiC,SAC/Ba,EACAC,GAGA,IAAKF,EAAAA,QAAQC,GACX,MAAM,IAAIH,EAAAA,eAAe,iCAI3B,OAAIG,GAAoBE,EAAUA,WAACC,qBAC1B,IAAIP,YAAYK,GAGlB,IAAIN,YAAYM,IAczBd,gCAAgD,SAC9Ca,EACAI,EACAC,EACAC,GAGA,IAAKP,EAAAA,QAAQC,GACX,MAAM,IAAIH,EAAAA,eAAe,iCAE3B,IAAKE,EAAAA,QAAQK,GACX,MAAM,IAAIP,EAAAA,eAAe,4BAE3B,IAAKE,EAAAA,QAAQM,GACX,MAAM,IAAIR,EAAAA,eAAe,2BAI3B,OAAIG,GAAoBE,EAAUA,WAACC,qBAC1B,IAAIP,YAAYQ,EAAaC,EAAYC,GAG3C,IAAIX,YAAYS,EAAaC,EAAYC,IASlDnB,eAA+B,SAAUoB,GACvC,GAAIA,aAAiBd,WACnB,OAAON,EAAcC,cAEvB,GAAImB,aAAiBZ,YACnB,OAAOR,EAAcG,eAEvB,GAAIiB,aAAiBX,YACnB,OAAOT,EAAcI,aAIvB,MAAM,IAAIM,EAAcA,eACtB,8DAKJ,IAAAW,EAAeC,OAAOC,OAAOvB"}