{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Color from \"./Color.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryType from \"./GeometryType.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nconst scratchInterpolateColorsArray = [];\r\n\r\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\r\n  const colors = scratchInterpolateColorsArray;\r\n  colors.length = numPoints;\r\n  let i;\r\n\r\n  const r0 = color0.red;\r\n  const g0 = color0.green;\r\n  const b0 = color0.blue;\r\n  const a0 = color0.alpha;\r\n\r\n  const r1 = color1.red;\r\n  const g1 = color1.green;\r\n  const b1 = color1.blue;\r\n  const a1 = color1.alpha;\r\n\r\n  if (Color.equals(color0, color1)) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      colors[i] = Color.clone(color0);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  const redPerVertex = (r1 - r0) / numPoints;\r\n  const greenPerVertex = (g1 - g0) / numPoints;\r\n  const bluePerVertex = (b1 - b0) / numPoints;\r\n  const alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n  for (i = 0; i < numPoints; i++) {\r\n    colors[i] = new Color(\r\n      r0 + i * redPerVertex,\r\n      g0 + i * greenPerVertex,\r\n      b0 + i * bluePerVertex,\r\n      a0 + i * alphaPerVertex\r\n    );\r\n  }\r\n\r\n  return colors;\r\n}\r\n\r\n/**\r\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n * and each additional position defines a line segment from the previous position. The polyline is capable of\r\n * displaying with a material.\r\n *\r\n * @alias PolylineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n * @param {Number} [options.width=1.0] The width in pixels.\r\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @exception {DeveloperError} At least two positions are required.\r\n * @exception {DeveloperError} width must be greater than or equal to one.\r\n * @exception {DeveloperError} colors has an invalid length.\r\n *\r\n * @see PolylineGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\r\n *\r\n * @example\r\n * // A polyline with two connected line segments\r\n * const polyline = new Cesium.PolylineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     0.0, 0.0,\r\n *     5.0, 0.0,\r\n *     5.0, 5.0\r\n *   ]),\r\n *   width : 10.0\r\n * });\r\n * const geometry = Cesium.PolylineGeometry.createGeometry(polyline);\r\n */\r\nfunction PolylineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const positions = options.positions;\r\n  const colors = options.colors;\r\n  const width = defaultValue(options.width, 1.0);\r\n  const colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions) || positions.length < 2) {\r\n    throw new DeveloperError(\"At least two positions are required.\");\r\n  }\r\n  if (typeof width !== \"number\") {\r\n    throw new DeveloperError(\"width must be a number\");\r\n  }\r\n  if (\r\n    defined(colors) &&\r\n    ((colorsPerVertex && colors.length < positions.length) ||\r\n      (!colorsPerVertex && colors.length < positions.length - 1))\r\n  ) {\r\n    throw new DeveloperError(\"colors has an invalid length.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._colors = colors;\r\n  this._width = width;\r\n  this._colorsPerVertex = colorsPerVertex;\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n\r\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._workerName = \"createPolylineGeometry\";\r\n\r\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  const positions = value._positions;\r\n  let length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  const colors = value._colors;\r\n  length = defined(colors) ? colors.length : 0.0;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    Color.pack(colors[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._arcType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  positions: undefined,\r\n  colors: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  width: undefined,\r\n  colorsPerVertex: undefined,\r\n  arcType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\r\n */\r\nPolylineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  let length = array[startingIndex++];\r\n  const positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  const colors = length > 0 ? new Array(length) : undefined;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    colors[i] = Color.unpack(array, startingIndex);\r\n  }\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const width = array[startingIndex++];\r\n  const colorsPerVertex = array[startingIndex++] === 1.0;\r\n  const arcType = array[startingIndex++];\r\n  const granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.colors = colors;\r\n    scratchOptions.width = width;\r\n    scratchOptions.colorsPerVertex = colorsPerVertex;\r\n    scratchOptions.arcType = arcType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._colors = colors;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._width = width;\r\n  result._colorsPerVertex = colorsPerVertex;\r\n  result._arcType = arcType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nconst scratchCartesian3 = new Cartesian3();\r\nconst scratchPosition = new Cartesian3();\r\nconst scratchPrevPosition = new Cartesian3();\r\nconst scratchNextPosition = new Cartesian3();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineGeometry.createGeometry = function (polylineGeometry) {\r\n  const width = polylineGeometry._width;\r\n  const vertexFormat = polylineGeometry._vertexFormat;\r\n  let colors = polylineGeometry._colors;\r\n  const colorsPerVertex = polylineGeometry._colorsPerVertex;\r\n  const arcType = polylineGeometry._arcType;\r\n  const granularity = polylineGeometry._granularity;\r\n  const ellipsoid = polylineGeometry._ellipsoid;\r\n\r\n  let i;\r\n  let j;\r\n  let k;\r\n\r\n  const removedIndices = [];\r\n  let positions = arrayRemoveDuplicates(\r\n    polylineGeometry._positions,\r\n    Cartesian3.equalsEpsilon,\r\n    false,\r\n    removedIndices\r\n  );\r\n\r\n  if (defined(colors) && removedIndices.length > 0) {\r\n    let removedArrayIndex = 0;\r\n    let nextRemovedIndex = removedIndices[0];\r\n    colors = colors.filter(function (color, index) {\r\n      let remove = false;\r\n      if (colorsPerVertex) {\r\n        remove =\r\n          index === nextRemovedIndex || (index === 0 && nextRemovedIndex === 1);\r\n      } else {\r\n        remove = index + 1 === nextRemovedIndex;\r\n      }\r\n\r\n      if (remove) {\r\n        removedArrayIndex++;\r\n        nextRemovedIndex = removedIndices[removedArrayIndex];\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  let positionsLength = positions.length;\r\n\r\n  // A width of a pixel or less is not a valid geometry, but in order to support external data\r\n  // that may have errors we treat this as an empty geometry.\r\n  if (positionsLength < 2 || width <= 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n    let subdivisionSize;\r\n    let numberOfPointsFunction;\r\n    if (arcType === ArcType.GEODESIC) {\r\n      subdivisionSize = CesiumMath.chordLength(\r\n        granularity,\r\n        ellipsoid.maximumRadius\r\n      );\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n    } else {\r\n      subdivisionSize = granularity;\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n    }\r\n\r\n    const heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n    if (defined(colors)) {\r\n      let colorLength = 1;\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        colorLength += numberOfPointsFunction(\r\n          positions[i],\r\n          positions[i + 1],\r\n          subdivisionSize\r\n        );\r\n      }\r\n\r\n      const newColors = new Array(colorLength);\r\n      let newColorIndex = 0;\r\n\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        const p0 = positions[i];\r\n        const p1 = positions[i + 1];\r\n        const c0 = colors[i];\r\n\r\n        const numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\r\n        if (colorsPerVertex && i < colorLength) {\r\n          const c1 = colors[i + 1];\r\n          const interpolatedColors = interpolateColors(\r\n            p0,\r\n            p1,\r\n            c0,\r\n            c1,\r\n            numColors\r\n          );\r\n          const interpolatedColorsLength = interpolatedColors.length;\r\n          for (j = 0; j < interpolatedColorsLength; ++j) {\r\n            newColors[newColorIndex++] = interpolatedColors[j];\r\n          }\r\n        } else {\r\n          for (j = 0; j < numColors; ++j) {\r\n            newColors[newColorIndex++] = Color.clone(c0);\r\n          }\r\n        }\r\n      }\r\n\r\n      newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\r\n      colors = newColors;\r\n\r\n      scratchInterpolateColorsArray.length = 0;\r\n    }\r\n\r\n    if (arcType === ArcType.GEODESIC) {\r\n      positions = PolylinePipeline.generateCartesianArc({\r\n        positions: positions,\r\n        minDistance: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    } else {\r\n      positions = PolylinePipeline.generateCartesianRhumbArc({\r\n        positions: positions,\r\n        granularity: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    }\r\n  }\r\n\r\n  positionsLength = positions.length;\r\n  const size = positionsLength * 4.0 - 4.0;\r\n\r\n  const finalPositions = new Float64Array(size * 3);\r\n  const prevPositions = new Float64Array(size * 3);\r\n  const nextPositions = new Float64Array(size * 3);\r\n  const expandAndWidth = new Float32Array(size * 2);\r\n  const st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n  const finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\r\n\r\n  let positionIndex = 0;\r\n  let expandAndWidthIndex = 0;\r\n  let stIndex = 0;\r\n  let colorIndex = 0;\r\n  let position;\r\n\r\n  for (j = 0; j < positionsLength; ++j) {\r\n    if (j === 0) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(positions[0], positions[1], position);\r\n      Cartesian3.add(positions[0], position, position);\r\n    } else {\r\n      position = positions[j - 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchPrevPosition);\r\n    Cartesian3.clone(positions[j], scratchPosition);\r\n\r\n    if (j === positionsLength - 1) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(\r\n        positions[positionsLength - 1],\r\n        positions[positionsLength - 2],\r\n        position\r\n      );\r\n      Cartesian3.add(positions[positionsLength - 1], position, position);\r\n    } else {\r\n      position = positions[j + 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchNextPosition);\r\n\r\n    let color0, color1;\r\n    if (defined(finalColors)) {\r\n      if (j !== 0 && !colorsPerVertex) {\r\n        color0 = colors[j - 1];\r\n      } else {\r\n        color0 = colors[j];\r\n      }\r\n\r\n      if (j !== positionsLength - 1) {\r\n        color1 = colors[j];\r\n      }\r\n    }\r\n\r\n    const startK = j === 0 ? 2 : 0;\r\n    const endK = j === positionsLength - 1 ? 2 : 4;\r\n\r\n    for (k = startK; k < endK; ++k) {\r\n      Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\r\n      Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\r\n      Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\r\n      positionIndex += 3;\r\n\r\n      const direction = k - 2 < 0 ? -1.0 : 1.0;\r\n      expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\r\n      expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n      if (vertexFormat.st) {\r\n        st[stIndex++] = j / (positionsLength - 1);\r\n        st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\r\n      }\r\n\r\n      if (defined(finalColors)) {\r\n        const color = k < 2 ? color0 : color1;\r\n\r\n        finalColors[colorIndex++] = Color.floatToByte(color.red);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.green);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.blue);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.alpha);\r\n      }\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes();\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  attributes.prevPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: prevPositions,\r\n  });\r\n\r\n  attributes.nextPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: nextPositions,\r\n  });\r\n\r\n  attributes.expandAndWidth = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 2,\r\n    values: expandAndWidth,\r\n  });\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: st,\r\n    });\r\n  }\r\n\r\n  if (defined(finalColors)) {\r\n    attributes.color = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 4,\r\n      values: finalColors,\r\n      normalize: true,\r\n    });\r\n  }\r\n\r\n  const indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n  let index = 0;\r\n  let indicesIndex = 0;\r\n  const length = positionsLength - 1.0;\r\n  for (j = 0; j < length; ++j) {\r\n    indices[indicesIndex++] = index;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 1;\r\n\r\n    indices[indicesIndex++] = index + 1;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 3;\r\n\r\n    index += 4;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: BoundingSphere.fromPoints(positions),\r\n    geometryType: GeometryType.POLYLINES,\r\n  });\r\n};\r\nexport default PolylineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\r\n\r\nfunction createPolylineGeometry(polylineGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\r\n  }\r\n  polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\r\n  return PolylineGeometry.createGeometry(polylineGeometry);\r\n}\r\nexport default createPolylineGeometry;\r\n"],"names":["scratchInterpolateColorsArray","interpolateColors","p0","p1","color0","color1","numPoints","colors","i","length","r0","red","g0","green","b0","blue","a0","alpha","r1","g1","b1","a1","Color","equals","clone","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","PolylineGeometry","options","positions","defaultValue","EMPTY_OBJECT","width","colorsPerVertex","defined","DeveloperError","this","_positions","_colors","_width","_colorsPerVertex","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_arcType","arcType","ArcType","GEODESIC","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","numComponents","Cartesian3","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","scratchCartesian3","scratchPosition","scratchPrevPosition","scratchNextPosition","createGeometry","polylineGeometry","j","k","removedIndices","arrayRemoveDuplicates","equalsEpsilon","removedArrayIndex","nextRemovedIndex","filter","color","index","remove","positionsLength","RHUMB","subdivisionSize","numberOfPointsFunction","chordLength","maximumRadius","PolylinePipeline","numberOfPoints","numberOfPointsRhumbLine","heights","extractHeights","colorLength","newColors","newColorIndex","c0","numColors","interpolatedColors","interpolatedColorsLength","generateCartesianArc","minDistance","height","generateCartesianRhumbArc","size","finalPositions","Float64Array","prevPositions","nextPositions","expandAndWidth","Float32Array","st","finalColors","Uint8Array","position","positionIndex","expandAndWidthIndex","stIndex","colorIndex","subtract","add","endK","direction","Math","max","floatToByte","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","prevPosition","nextPosition","FLOAT","UNSIGNED_BYTE","normalize","indices","IndexDatatype","createTypedArray","indicesIndex","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromPoints","geometryType","GeometryType","POLYLINES","offset"],"mappings":"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"}