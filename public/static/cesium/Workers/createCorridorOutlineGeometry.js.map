{"version":3,"file":"createCorridorOutlineGeometry.js","sources":["../../../../Source/Core/CorridorOutlineGeometry.js","../../../../Source/WorkersES6/createCorridorOutlineGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\n\r\nconst cartesian1 = new Cartesian3();\r\nconst cartesian2 = new Cartesian3();\r\nconst cartesian3 = new Cartesian3();\r\n\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n  for (let i = 0; i < positions.length; i++) {\r\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n  }\r\n  return positions;\r\n}\r\n\r\nfunction combine(computedPositions, cornerType) {\r\n  const wallIndices = [];\r\n  const positions = computedPositions.positions;\r\n  const corners = computedPositions.corners;\r\n  const endPositions = computedPositions.endPositions;\r\n  const attributes = new GeometryAttributes();\r\n  let corner;\r\n  let leftCount = 0;\r\n  let rightCount = 0;\r\n  let i;\r\n  let indicesLength = 0;\r\n  let length;\r\n  for (i = 0; i < positions.length; i += 2) {\r\n    length = positions[i].length - 3;\r\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n    indicesLength += (length / 3) * 4;\r\n    rightCount += positions[i + 1].length - 3;\r\n  }\r\n  leftCount += 3; //add back count for end positions\r\n  rightCount += 3;\r\n  for (i = 0; i < corners.length; i++) {\r\n    corner = corners[i];\r\n    const leftSide = corners[i].leftPositions;\r\n    if (defined(leftSide)) {\r\n      length = leftSide.length;\r\n      leftCount += length;\r\n      indicesLength += (length / 3) * 2;\r\n    } else {\r\n      length = corners[i].rightPositions.length;\r\n      rightCount += length;\r\n      indicesLength += (length / 3) * 2;\r\n    }\r\n  }\r\n\r\n  const addEndPositions = defined(endPositions);\r\n  let endPositionLength;\r\n  if (addEndPositions) {\r\n    endPositionLength = endPositions[0].length - 3;\r\n    leftCount += endPositionLength;\r\n    rightCount += endPositionLength;\r\n    endPositionLength /= 3;\r\n    indicesLength += endPositionLength * 4;\r\n  }\r\n  const size = leftCount + rightCount;\r\n  const finalPositions = new Float64Array(size);\r\n  let front = 0;\r\n  let back = size - 1;\r\n  let UL, LL, UR, LR;\r\n  let rightPos, leftPos;\r\n  const halfLength = endPositionLength / 2;\r\n\r\n  const indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\r\n  let index = 0;\r\n\r\n  indices[index++] = front / 3;\r\n  indices[index++] = (back - 2) / 3;\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    wallIndices.push(front / 3);\r\n    leftPos = cartesian1;\r\n    rightPos = cartesian2;\r\n    const firstEndPositions = endPositions[0];\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength - 1 - i) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength + i) * 3,\r\n        rightPos\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n\r\n      LL = front / 3;\r\n      LR = LL + 1;\r\n      UL = (back - 2) / 3;\r\n      UR = UL - 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n  }\r\n\r\n  let posIndex = 0;\r\n  let rightEdge = positions[posIndex++]; //add first two edges\r\n  let leftEdge = positions[posIndex++];\r\n  finalPositions.set(rightEdge, front);\r\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n  length = leftEdge.length - 3;\r\n  wallIndices.push(front / 3, (back - 2) / 3);\r\n  for (i = 0; i < length; i += 3) {\r\n    LL = front / 3;\r\n    LR = LL + 1;\r\n    UL = (back - 2) / 3;\r\n    UR = UL - 1;\r\n    indices[index++] = UL;\r\n    indices[index++] = UR;\r\n    indices[index++] = LL;\r\n    indices[index++] = LR;\r\n\r\n    front += 3;\r\n    back -= 3;\r\n  }\r\n\r\n  for (i = 0; i < corners.length; i++) {\r\n    let j;\r\n    corner = corners[i];\r\n    const l = corner.leftPositions;\r\n    const r = corner.rightPositions;\r\n    let start;\r\n    let outsidePoint = cartesian3;\r\n    if (defined(l)) {\r\n      back -= 3;\r\n      start = UR;\r\n      wallIndices.push(LR);\r\n      for (j = 0; j < l.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n        indices[index++] = start - j - 1;\r\n        indices[index++] = start - j;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          undefined,\r\n          back\r\n        );\r\n        back -= 3;\r\n      }\r\n      wallIndices.push(start - Math.floor(l.length / 6));\r\n      if (cornerType === CornerType.BEVELED) {\r\n        wallIndices.push((back - 2) / 3 + 1);\r\n      }\r\n      front += 3;\r\n    } else {\r\n      front += 3;\r\n      start = LR;\r\n      wallIndices.push(UR);\r\n      for (j = 0; j < r.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n        indices[index++] = start + j;\r\n        indices[index++] = start + j + 1;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          front\r\n        );\r\n        front += 3;\r\n      }\r\n      wallIndices.push(start + Math.floor(r.length / 6));\r\n      if (cornerType === CornerType.BEVELED) {\r\n        wallIndices.push(front / 3 - 1);\r\n      }\r\n      back -= 3;\r\n    }\r\n    rightEdge = positions[posIndex++];\r\n    leftEdge = positions[posIndex++];\r\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n    leftEdge.splice(leftEdge.length - 3, 3);\r\n    finalPositions.set(rightEdge, front);\r\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n    length = leftEdge.length - 3;\r\n\r\n    for (j = 0; j < leftEdge.length; j += 3) {\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n    front -= 3;\r\n    back += 3;\r\n    wallIndices.push(front / 3, (back - 2) / 3);\r\n  }\r\n\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    front += 3;\r\n    back -= 3;\r\n    leftPos = cartesian1;\r\n    rightPos = cartesian2;\r\n    const lastEndPositions = endPositions[1];\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        lastEndPositions,\r\n        (endPositionLength - i - 1) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n\r\n    wallIndices.push(front / 3);\r\n  } else {\r\n    wallIndices.push(front / 3, (back - 2) / 3);\r\n  }\r\n  indices[index++] = front / 3;\r\n  indices[index++] = (back - 2) / 3;\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: indices,\r\n    wallIndices: wallIndices,\r\n  };\r\n}\r\n\r\nfunction computePositionsExtruded(params) {\r\n  const ellipsoid = params.ellipsoid;\r\n  const computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n  const attr = combine(computedPositions, params.cornerType);\r\n  const wallIndices = attr.wallIndices;\r\n  const height = params.height;\r\n  const extrudedHeight = params.extrudedHeight;\r\n  const attributes = attr.attributes;\r\n  const indices = attr.indices;\r\n  let positions = attributes.position.values;\r\n  let length = positions.length;\r\n  let extrudedPositions = new Float64Array(length);\r\n  extrudedPositions.set(positions);\r\n  const newPositions = new Float64Array(length * 2);\r\n\r\n  positions = PolygonPipeline.scaleToGeodeticHeight(\r\n    positions,\r\n    height,\r\n    ellipsoid\r\n  );\r\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\r\n    extrudedPositions,\r\n    extrudedHeight,\r\n    ellipsoid\r\n  );\r\n  newPositions.set(positions);\r\n  newPositions.set(extrudedPositions, length);\r\n  attributes.position.values = newPositions;\r\n\r\n  length /= 3;\r\n  if (defined(params.offsetAttribute)) {\r\n    let applyOffset = new Uint8Array(length * 2);\r\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n      applyOffset = arrayFill(applyOffset, 1, 0, length);\r\n    } else {\r\n      const applyOffsetValue =\r\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n    }\r\n\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  let i;\r\n  const iLength = indices.length;\r\n  const newIndices = IndexDatatype.createTypedArray(\r\n    newPositions.length / 3,\r\n    (iLength + wallIndices.length) * 2\r\n  );\r\n  newIndices.set(indices);\r\n  let index = iLength;\r\n  for (i = 0; i < iLength; i += 2) {\r\n    // bottom indices\r\n    const v0 = indices[i];\r\n    const v1 = indices[i + 1];\r\n    newIndices[index++] = v0 + length;\r\n    newIndices[index++] = v1 + length;\r\n  }\r\n\r\n  let UL, LL;\r\n  for (i = 0; i < wallIndices.length; i++) {\r\n    //wall indices\r\n    UL = wallIndices[i];\r\n    LL = UL + length;\r\n    newIndices[index++] = UL;\r\n    newIndices[index++] = LL;\r\n  }\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: newIndices,\r\n  };\r\n}\r\n\r\n/**\r\n * A description of a corridor outline.\r\n *\r\n * @alias CorridorOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\r\n * @param {Number} options.width The distance between the edges of the corridor outline.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see CorridorOutlineGeometry.createGeometry\r\n *\r\n * @example\r\n * const corridor = new Cesium.CorridorOutlineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n *   width : 100000\r\n * });\r\n */\r\nfunction CorridorOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const positions = options.positions;\r\n  const width = options.width;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"options.positions\", positions);\r\n  Check.typeOf.number(\"options.width\", width);\r\n  //>>includeEnd('debug');\r\n\r\n  const height = defaultValue(options.height, 0.0);\r\n  const extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n  this._positions = positions;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._width = width;\r\n  this._height = Math.max(height, extrudedHeight);\r\n  this._extrudedHeight = Math.min(height, extrudedHeight);\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createCorridorOutlineGeometry\";\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CorridorOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCorridorOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.typeOf.object(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const positions = value._positions;\r\n  const length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (let i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._height;\r\n  array[startingIndex++] = value._extrudedHeight;\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex++] = value._granularity;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchOptions = {\r\n  positions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  width: undefined,\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\r\n */\r\nCorridorOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const length = array[startingIndex++];\r\n  const positions = new Array(length);\r\n\r\n  for (let i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const width = array[startingIndex++];\r\n  const height = array[startingIndex++];\r\n  const extrudedHeight = array[startingIndex++];\r\n  const cornerType = array[startingIndex++];\r\n  const granularity = array[startingIndex++];\r\n  const offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.width = width;\r\n    scratchOptions.height = height;\r\n    scratchOptions.extrudedHeight = extrudedHeight;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new CorridorOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._width = width;\r\n  result._height = height;\r\n  result._extrudedHeight = extrudedHeight;\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCorridorOutlineGeometry.createGeometry = function (corridorOutlineGeometry) {\r\n  let positions = corridorOutlineGeometry._positions;\r\n  const width = corridorOutlineGeometry._width;\r\n  const ellipsoid = corridorOutlineGeometry._ellipsoid;\r\n\r\n  positions = scaleToSurface(positions, ellipsoid);\r\n  const cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n\r\n  if (cleanPositions.length < 2 || width <= 0) {\r\n    return;\r\n  }\r\n\r\n  const height = corridorOutlineGeometry._height;\r\n  const extrudedHeight = corridorOutlineGeometry._extrudedHeight;\r\n  const extrude = !CesiumMath.equalsEpsilon(\r\n    height,\r\n    extrudedHeight,\r\n    0,\r\n    CesiumMath.EPSILON2\r\n  );\r\n\r\n  const params = {\r\n    ellipsoid: ellipsoid,\r\n    positions: cleanPositions,\r\n    width: width,\r\n    cornerType: corridorOutlineGeometry._cornerType,\r\n    granularity: corridorOutlineGeometry._granularity,\r\n    saveAttributes: false,\r\n  };\r\n  let attr;\r\n  if (extrude) {\r\n    params.height = height;\r\n    params.extrudedHeight = extrudedHeight;\r\n    params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\r\n    attr = computePositionsExtruded(params);\r\n  } else {\r\n    const computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n    attr = combine(computedPositions, params.cornerType);\r\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n      attr.attributes.position.values,\r\n      height,\r\n      ellipsoid\r\n    );\r\n\r\n    if (defined(corridorOutlineGeometry._offsetAttribute)) {\r\n      const length = attr.attributes.position.values.length;\r\n      const applyOffset = new Uint8Array(length / 3);\r\n      const offsetValue =\r\n        corridorOutlineGeometry._offsetAttribute ===\r\n        GeometryOffsetAttribute.NONE\r\n          ? 0\r\n          : 1;\r\n      arrayFill(applyOffset, offsetValue);\r\n      attr.attributes.applyOffset = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n        componentsPerAttribute: 1,\r\n        values: applyOffset,\r\n      });\r\n    }\r\n  }\r\n  const attributes = attr.attributes;\r\n  const boundingSphere = BoundingSphere.fromVertices(\r\n    attributes.position.values,\r\n    undefined,\r\n    3\r\n  );\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: attr.indices,\r\n    primitiveType: PrimitiveType.LINES,\r\n    boundingSphere: boundingSphere,\r\n    offsetAttribute: corridorOutlineGeometry._offsetAttribute,\r\n  });\r\n};\r\nexport default CorridorOutlineGeometry;\r\n","import CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\r\n  if (defined(offset)) {\r\n    corridorOutlineGeometry = CorridorOutlineGeometry.unpack(\r\n      corridorOutlineGeometry,\r\n      offset\r\n    );\r\n  }\r\n  corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(\r\n    corridorOutlineGeometry._ellipsoid\r\n  );\r\n  return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\r\n}\r\nexport default createCorridorOutlineGeometry;\r\n"],"names":["cartesian1","Cartesian3","cartesian2","cartesian3","combine","computedPositions","cornerType","wallIndices","positions","corners","endPositions","attributes","GeometryAttributes","corner","i","length","leftCount","rightCount","indicesLength","leftSide","leftPositions","defined","rightPositions","addEndPositions","endPositionLength","size","finalPositions","Float64Array","UL","LL","UR","LR","rightPos","leftPos","front","back","halfLength","indices","IndexDatatype","createTypedArray","index","push","firstEndPositions","fromArray","CorridorGeometryLibrary","addAttribute","undefined","posIndex","rightEdge","leftEdge","set","j","l","r","start","outsidePoint","Math","floor","CornerType","BEVELED","splice","lastEndPositions","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","CorridorOutlineGeometry","options","defaultValue","EMPTY_OBJECT","width","Check","typeOf","object","number","height","extrudedHeight","this","_positions","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_width","_height","max","_extrudedHeight","min","_cornerType","ROUNDED","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_offsetAttribute","offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchOptions","unpack","result","Array","createGeometry","corridorOutlineGeometry","scaleToGeodeticSurface","scaleToSurface","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","extrude","EPSILON2","params","saveAttributes","attr","computePositions","extrudedPositions","newPositions","PolygonPipeline","scaleToGeodeticHeight","applyOffset","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","applyOffsetValue","NONE","UNSIGNED_BYTE","iLength","newIndices","v0","v1","computePositionsExtruded","offsetValue","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","LINES","offset"],"mappings":"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"}