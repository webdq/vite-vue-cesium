{"version":3,"file":"EllipsoidOutlineGeometry-166491ea.js","sources":["../../../../Source/Core/EllipsoidOutlineGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\n\r\nconst defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\n\r\n/**\r\n * A description of the outline of an ellipsoid centered at the origin.\r\n *\r\n * @alias EllipsoidOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.stackPartitions=10] The count of stacks for the ellipsoid (1 greater than the number of parallel lines).\r\n * @param {Number} [options.slicePartitions=8] The count of slices for the ellipsoid (Equal to the number of radial lines).\r\n * @param {Number} [options.subdivisions=128] The number of points per line, determining the granularity of the curvature.\r\n *\r\n * @exception {DeveloperError} options.stackPartitions must be greater than or equal to one.\r\n * @exception {DeveloperError} options.slicePartitions must be greater than or equal to zero.\r\n * @exception {DeveloperError} options.subdivisions must be greater than or equal to zero.\r\n *\r\n * @example\r\n * const ellipsoid = new Cesium.EllipsoidOutlineGeometry({\r\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0),\r\n *   stackPartitions: 6,\r\n *   slicePartitions: 5\r\n * });\r\n * const geometry = Cesium.EllipsoidOutlineGeometry.createGeometry(ellipsoid);\r\n */\r\nfunction EllipsoidOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  const radii = defaultValue(options.radii, defaultRadii);\r\n  const innerRadii = defaultValue(options.innerRadii, radii);\r\n  const minimumClock = defaultValue(options.minimumClock, 0.0);\r\n  const maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\r\n  const minimumCone = defaultValue(options.minimumCone, 0.0);\r\n  const maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\r\n  const stackPartitions = Math.round(defaultValue(options.stackPartitions, 10));\r\n  const slicePartitions = Math.round(defaultValue(options.slicePartitions, 8));\r\n  const subdivisions = Math.round(defaultValue(options.subdivisions, 128));\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (stackPartitions < 1) {\r\n    throw new DeveloperError(\"options.stackPartitions cannot be less than 1\");\r\n  }\r\n  if (slicePartitions < 0) {\r\n    throw new DeveloperError(\"options.slicePartitions cannot be less than 0\");\r\n  }\r\n  if (subdivisions < 0) {\r\n    throw new DeveloperError(\r\n      \"options.subdivisions must be greater than or equal to zero.\"\r\n    );\r\n  }\r\n  if (\r\n    defined(options.offsetAttribute) &&\r\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._radii = Cartesian3.clone(radii);\r\n  this._innerRadii = Cartesian3.clone(innerRadii);\r\n  this._minimumClock = minimumClock;\r\n  this._maximumClock = maximumClock;\r\n  this._minimumCone = minimumCone;\r\n  this._maximumCone = maximumCone;\r\n  this._stackPartitions = stackPartitions;\r\n  this._slicePartitions = slicePartitions;\r\n  this._subdivisions = subdivisions;\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createEllipsoidOutlineGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipsoidOutlineGeometry.packedLength = 2 * Cartesian3.packedLength + 8;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {EllipsoidOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipsoidOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  Cartesian3.pack(value._radii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  array[startingIndex++] = value._minimumClock;\r\n  array[startingIndex++] = value._maximumClock;\r\n  array[startingIndex++] = value._minimumCone;\r\n  array[startingIndex++] = value._maximumCone;\r\n  array[startingIndex++] = value._stackPartitions;\r\n  array[startingIndex++] = value._slicePartitions;\r\n  array[startingIndex++] = value._subdivisions;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchRadii = new Cartesian3();\r\nconst scratchInnerRadii = new Cartesian3();\r\nconst scratchOptions = {\r\n  radii: scratchRadii,\r\n  innerRadii: scratchInnerRadii,\r\n  minimumClock: undefined,\r\n  maximumClock: undefined,\r\n  minimumCone: undefined,\r\n  maximumCone: undefined,\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n  subdivisions: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {EllipsoidOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {EllipsoidOutlineGeometry} The modified result parameter or a new EllipsoidOutlineGeometry instance if one was not provided.\r\n */\r\nEllipsoidOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const minimumClock = array[startingIndex++];\r\n  const maximumClock = array[startingIndex++];\r\n  const minimumCone = array[startingIndex++];\r\n  const maximumCone = array[startingIndex++];\r\n  const stackPartitions = array[startingIndex++];\r\n  const slicePartitions = array[startingIndex++];\r\n  const subdivisions = array[startingIndex++];\r\n  const offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.minimumClock = minimumClock;\r\n    scratchOptions.maximumClock = maximumClock;\r\n    scratchOptions.minimumCone = minimumCone;\r\n    scratchOptions.maximumCone = maximumCone;\r\n    scratchOptions.stackPartitions = stackPartitions;\r\n    scratchOptions.slicePartitions = slicePartitions;\r\n    scratchOptions.subdivisions = subdivisions;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new EllipsoidOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._radii = Cartesian3.clone(radii, result._radii);\r\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\r\n  result._minimumClock = minimumClock;\r\n  result._maximumClock = maximumClock;\r\n  result._minimumCone = minimumCone;\r\n  result._maximumCone = maximumCone;\r\n  result._stackPartitions = stackPartitions;\r\n  result._slicePartitions = slicePartitions;\r\n  result._subdivisions = subdivisions;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {EllipsoidOutlineGeometry} ellipsoidGeometry A description of the ellipsoid outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nEllipsoidOutlineGeometry.createGeometry = function (ellipsoidGeometry) {\r\n  const radii = ellipsoidGeometry._radii;\r\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const innerRadii = ellipsoidGeometry._innerRadii;\r\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const minimumClock = ellipsoidGeometry._minimumClock;\r\n  const maximumClock = ellipsoidGeometry._maximumClock;\r\n  const minimumCone = ellipsoidGeometry._minimumCone;\r\n  const maximumCone = ellipsoidGeometry._maximumCone;\r\n  const subdivisions = ellipsoidGeometry._subdivisions;\r\n  const ellipsoid = Ellipsoid.fromCartesian3(radii);\r\n\r\n  // Add an extra slice and stack to remain consistent with EllipsoidGeometry\r\n  let slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n  let stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n  slicePartitions = Math.round(\r\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\r\n      CesiumMath.TWO_PI\r\n  );\r\n  stackPartitions = Math.round(\r\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / CesiumMath.PI\r\n  );\r\n\r\n  if (slicePartitions < 2) {\r\n    slicePartitions = 2;\r\n  }\r\n  if (stackPartitions < 2) {\r\n    stackPartitions = 2;\r\n  }\r\n\r\n  let extraIndices = 0;\r\n  let vertexMultiplier = 1.0;\r\n  const hasInnerSurface =\r\n    innerRadii.x !== radii.x ||\r\n    innerRadii.y !== radii.y ||\r\n    innerRadii.z !== radii.z;\r\n  let isTopOpen = false;\r\n  let isBotOpen = false;\r\n  if (hasInnerSurface) {\r\n    vertexMultiplier = 2.0;\r\n    // Add 2x slicePartitions to connect the top/bottom of the outer to\r\n    // the top/bottom of the inner\r\n    if (minimumCone > 0.0) {\r\n      isTopOpen = true;\r\n      extraIndices += slicePartitions;\r\n    }\r\n    if (maximumCone < Math.PI) {\r\n      isBotOpen = true;\r\n      extraIndices += slicePartitions;\r\n    }\r\n  }\r\n\r\n  const vertexCount =\r\n    subdivisions * vertexMultiplier * (stackPartitions + slicePartitions);\r\n  const positions = new Float64Array(vertexCount * 3);\r\n\r\n  // Multiply by two because two points define each line segment\r\n  const numIndices =\r\n    2 *\r\n    (vertexCount +\r\n      extraIndices -\r\n      (slicePartitions + stackPartitions) * vertexMultiplier);\r\n  const indices = IndexDatatype.createTypedArray(vertexCount, numIndices);\r\n\r\n  let i;\r\n  let j;\r\n  let theta;\r\n  let phi;\r\n  let index = 0;\r\n\r\n  // Calculate sin/cos phi\r\n  const sinPhi = new Array(stackPartitions);\r\n  const cosPhi = new Array(stackPartitions);\r\n  for (i = 0; i < stackPartitions; i++) {\r\n    phi =\r\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1);\r\n    sinPhi[i] = sin(phi);\r\n    cosPhi[i] = cos(phi);\r\n  }\r\n\r\n  // Calculate sin/cos theta\r\n  const sinTheta = new Array(subdivisions);\r\n  const cosTheta = new Array(subdivisions);\r\n  for (i = 0; i < subdivisions; i++) {\r\n    theta =\r\n      minimumClock + (i * (maximumClock - minimumClock)) / (subdivisions - 1);\r\n    sinTheta[i] = sin(theta);\r\n    cosTheta[i] = cos(theta);\r\n  }\r\n\r\n  // Calculate the latitude lines on the outer surface\r\n  for (i = 0; i < stackPartitions; i++) {\r\n    for (j = 0; j < subdivisions; j++) {\r\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n      positions[index++] = radii.z * cosPhi[i];\r\n    }\r\n  }\r\n\r\n  // Calculate the latitude lines on the inner surface\r\n  if (hasInnerSurface) {\r\n    for (i = 0; i < stackPartitions; i++) {\r\n      for (j = 0; j < subdivisions; j++) {\r\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n        positions[index++] = innerRadii.z * cosPhi[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate sin/cos phi\r\n  sinPhi.length = subdivisions;\r\n  cosPhi.length = subdivisions;\r\n  for (i = 0; i < subdivisions; i++) {\r\n    phi = minimumCone + (i * (maximumCone - minimumCone)) / (subdivisions - 1);\r\n    sinPhi[i] = sin(phi);\r\n    cosPhi[i] = cos(phi);\r\n  }\r\n\r\n  // Calculate sin/cos theta for each slice partition\r\n  sinTheta.length = slicePartitions;\r\n  cosTheta.length = slicePartitions;\r\n  for (i = 0; i < slicePartitions; i++) {\r\n    theta =\r\n      minimumClock +\r\n      (i * (maximumClock - minimumClock)) / (slicePartitions - 1);\r\n    sinTheta[i] = sin(theta);\r\n    cosTheta[i] = cos(theta);\r\n  }\r\n\r\n  // Calculate the longitude lines on the outer surface\r\n  for (i = 0; i < subdivisions; i++) {\r\n    for (j = 0; j < slicePartitions; j++) {\r\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n      positions[index++] = radii.z * cosPhi[i];\r\n    }\r\n  }\r\n\r\n  // Calculate the longitude lines on the inner surface\r\n  if (hasInnerSurface) {\r\n    for (i = 0; i < subdivisions; i++) {\r\n      for (j = 0; j < slicePartitions; j++) {\r\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n        positions[index++] = innerRadii.z * cosPhi[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create indices for the latitude lines\r\n  index = 0;\r\n  for (i = 0; i < stackPartitions * vertexMultiplier; i++) {\r\n    const topOffset = i * subdivisions;\r\n    for (j = 0; j < subdivisions - 1; j++) {\r\n      indices[index++] = topOffset + j;\r\n      indices[index++] = topOffset + j + 1;\r\n    }\r\n  }\r\n\r\n  // Create indices for the outer longitude lines\r\n  let offset = stackPartitions * subdivisions * vertexMultiplier;\r\n  for (i = 0; i < slicePartitions; i++) {\r\n    for (j = 0; j < subdivisions - 1; j++) {\r\n      indices[index++] = offset + i + j * slicePartitions;\r\n      indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n    }\r\n  }\r\n\r\n  // Create indices for the inner longitude lines\r\n  if (hasInnerSurface) {\r\n    offset =\r\n      stackPartitions * subdivisions * vertexMultiplier +\r\n      slicePartitions * subdivisions;\r\n    for (i = 0; i < slicePartitions; i++) {\r\n      for (j = 0; j < subdivisions - 1; j++) {\r\n        indices[index++] = offset + i + j * slicePartitions;\r\n        indices[index++] = offset + i + (j + 1) * slicePartitions;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (hasInnerSurface) {\r\n    let outerOffset = stackPartitions * subdivisions * vertexMultiplier;\r\n    let innerOffset = outerOffset + subdivisions * slicePartitions;\r\n    if (isTopOpen) {\r\n      // Draw lines from the top of the inner surface to the top of the outer surface\r\n      for (i = 0; i < slicePartitions; i++) {\r\n        indices[index++] = outerOffset + i;\r\n        indices[index++] = innerOffset + i;\r\n      }\r\n    }\r\n\r\n    if (isBotOpen) {\r\n      // Draw lines from the top of the inner surface to the top of the outer surface\r\n      outerOffset += subdivisions * slicePartitions - slicePartitions;\r\n      innerOffset += subdivisions * slicePartitions - slicePartitions;\r\n      for (i = 0; i < slicePartitions; i++) {\r\n        indices[index++] = outerOffset + i;\r\n        indices[index++] = innerOffset + i;\r\n      }\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes({\r\n    position: new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    }),\r\n  });\r\n\r\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n    const length = positions.length;\r\n    const applyOffset = new Uint8Array(length / 3);\r\n    const offsetValue =\r\n      ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n        ? 0\r\n        : 1;\r\n    arrayFill(applyOffset, offsetValue);\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.LINES,\r\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoid),\r\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\r\n  });\r\n};\r\nexport default EllipsoidOutlineGeometry;\r\n"],"names":["defaultRadii","Cartesian3","cos","Math","sin","EllipsoidOutlineGeometry","options","defaultValue","EMPTY_OBJECT","radii","innerRadii","minimumClock","maximumClock","CesiumMath","TWO_PI","minimumCone","maximumCone","PI","stackPartitions","round","slicePartitions","subdivisions","DeveloperError","defined","offsetAttribute","GeometryOffsetAttribute","TOP","this","_radii","clone","_innerRadii","_minimumClock","_maximumClock","_minimumCone","_maximumCone","_stackPartitions","_slicePartitions","_subdivisions","_offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchRadii","scratchInnerRadii","scratchOptions","undefined","unpack","result","createGeometry","ellipsoidGeometry","x","y","z","ellipsoid","Ellipsoid","fromCartesian3","abs","extraIndices","vertexMultiplier","hasInnerSurface","isTopOpen","isBotOpen","vertexCount","positions","Float64Array","numIndices","indices","IndexDatatype","createTypedArray","i","j","theta","phi","index","sinPhi","Array","cosPhi","sinTheta","cosTheta","length","topOffset","offset","outerOffset","innerOffset","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","applyOffset","Uint8Array","offsetValue","NONE","arrayFill","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","LINES","boundingSphere","BoundingSphere","fromEllipsoid"],"mappings":"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"}