{"version":3,"file":"createPolylineVolumeOutlineGeometry.js","sources":["../../../../Source/Core/PolylineVolumeOutlineGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeOutlineGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\nfunction computeAttributes(positions, shape) {\r\n  const attributes = new GeometryAttributes();\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: positions,\r\n  });\r\n\r\n  const shapeLength = shape.length;\r\n  const vertexCount = attributes.position.values.length / 3;\r\n  const positionLength = positions.length / 3;\r\n  const shapeCount = positionLength / shapeLength;\r\n  const indices = IndexDatatype.createTypedArray(\r\n    vertexCount,\r\n    2 * shapeLength * (shapeCount + 1)\r\n  );\r\n  let i, j;\r\n  let index = 0;\r\n  i = 0;\r\n  let offset = i * shapeLength;\r\n  for (j = 0; j < shapeLength - 1; j++) {\r\n    indices[index++] = j + offset;\r\n    indices[index++] = j + offset + 1;\r\n  }\r\n  indices[index++] = shapeLength - 1 + offset;\r\n  indices[index++] = offset;\r\n\r\n  i = shapeCount - 1;\r\n  offset = i * shapeLength;\r\n  for (j = 0; j < shapeLength - 1; j++) {\r\n    indices[index++] = j + offset;\r\n    indices[index++] = j + offset + 1;\r\n  }\r\n  indices[index++] = shapeLength - 1 + offset;\r\n  indices[index++] = offset;\r\n\r\n  for (i = 0; i < shapeCount - 1; i++) {\r\n    const firstOffset = shapeLength * i;\r\n    const secondOffset = firstOffset + shapeLength;\r\n    for (j = 0; j < shapeLength; j++) {\r\n      indices[index++] = j + firstOffset;\r\n      indices[index++] = j + secondOffset;\r\n    }\r\n  }\r\n\r\n  const geometry = new Geometry({\r\n    attributes: attributes,\r\n    indices: IndexDatatype.createTypedArray(vertexCount, indices),\r\n    boundingSphere: BoundingSphere.fromVertices(positions),\r\n    primitiveType: PrimitiveType.LINES,\r\n  });\r\n\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n *\r\n * @alias PolylineVolumeOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.polylinePositions An array of positions that define the center of the polyline volume.\r\n * @param {Cartesian2[]} options.shapePositions An array of positions that define the shape to be extruded along the polyline\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see PolylineVolumeOutlineGeometry#createGeometry\r\n *\r\n * @example\r\n * function computeCircle(radius) {\r\n *   const positions = [];\r\n *   for (let i = 0; i < 360; i++) {\r\n *     const radians = Cesium.Math.toRadians(i);\r\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n *   }\r\n *   return positions;\r\n * }\r\n *\r\n * const volumeOutline = new Cesium.PolylineVolumeOutlineGeometry({\r\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0\r\n *   ]),\r\n *   shapePositions : computeCircle(100000.0)\r\n * });\r\n */\r\nfunction PolylineVolumeOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const positions = options.polylinePositions;\r\n  const shape = options.shapePositions;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.polylinePositions is required.\");\r\n  }\r\n  if (!defined(shape)) {\r\n    throw new DeveloperError(\"options.shapePositions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._shape = shape;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._workerName = \"createPolylineVolumeOutlineGeometry\";\r\n\r\n  let numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength = numComponents + Ellipsoid.packedLength + 2;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineVolumeOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineVolumeOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  const positions = value._positions;\r\n  let length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  const shape = value._shape;\r\n  length = shape.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    Cartesian2.pack(shape[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchOptions = {\r\n  polylinePositions: undefined,\r\n  shapePositions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  height: undefined,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineVolumeOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineVolumeOutlineGeometry} The modified result parameter or a new PolylineVolumeOutlineGeometry instance if one was not provided.\r\n */\r\nPolylineVolumeOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  let i;\r\n\r\n  let length = array[startingIndex++];\r\n  const positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  const shape = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    shape[i] = Cartesian2.unpack(array, startingIndex);\r\n  }\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const cornerType = array[startingIndex++];\r\n  const granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.polylinePositions = positions;\r\n    scratchOptions.shapePositions = shape;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineVolumeOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._shape = shape;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nconst brScratch = new BoundingRectangle();\r\n\r\n/**\r\n * Computes the geometric representation of the outline of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineVolumeOutlineGeometry} polylineVolumeOutlineGeometry A description of the polyline volume outline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineVolumeOutlineGeometry.createGeometry = function (\r\n  polylineVolumeOutlineGeometry\r\n) {\r\n  const positions = polylineVolumeOutlineGeometry._positions;\r\n  const cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n  let shape2D = polylineVolumeOutlineGeometry._shape;\r\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n    return undefined;\r\n  }\r\n\r\n  if (\r\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\r\n  ) {\r\n    shape2D.reverse();\r\n  }\r\n  const boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n  const computedPositions = PolylineVolumeGeometryLibrary.computePositions(\r\n    cleanPositions,\r\n    shape2D,\r\n    boundingRectangle,\r\n    polylineVolumeOutlineGeometry,\r\n    false\r\n  );\r\n  return computeAttributes(computedPositions, shape2D);\r\n};\r\nexport default PolylineVolumeOutlineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineVolumeOutlineGeometry from \"../Core/PolylineVolumeOutlineGeometry.js\";\r\n\r\nfunction createPolylineVolumeOutlineGeometry(\r\n  polylineVolumeOutlineGeometry,\r\n  offset\r\n) {\r\n  if (defined(offset)) {\r\n    polylineVolumeOutlineGeometry = PolylineVolumeOutlineGeometry.unpack(\r\n      polylineVolumeOutlineGeometry,\r\n      offset\r\n    );\r\n  }\r\n  polylineVolumeOutlineGeometry._ellipsoid = Ellipsoid.clone(\r\n    polylineVolumeOutlineGeometry._ellipsoid\r\n  );\r\n  return PolylineVolumeOutlineGeometry.createGeometry(\r\n    polylineVolumeOutlineGeometry\r\n  );\r\n}\r\nexport default createPolylineVolumeOutlineGeometry;\r\n"],"names":["PolylineVolumeOutlineGeometry","options","positions","defaultValue","EMPTY_OBJECT","polylinePositions","shape","shapePositions","defined","DeveloperError","this","_positions","_shape","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","CornerType","ROUNDED","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_workerName","numComponents","length","Cartesian3","packedLength","Cartesian2","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchOptions","undefined","height","unpack","result","Array","brScratch","BoundingRectangle","createGeometry","polylineVolumeOutlineGeometry","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","shape2D","PolylineVolumeGeometryLibrary","removeDuplicatesFromShape","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","boundingRectangle","fromPoints","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","shapeLength","vertexCount","shapeCount","indices","IndexDatatype","createTypedArray","j","index","offset","firstOffset","secondOffset","Geometry","boundingSphere","BoundingSphere","fromVertices","primitiveType","PrimitiveType","LINES","computeAttributes","computePositions"],"mappings":"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"}