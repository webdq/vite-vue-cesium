{"version":3,"file":"arrayRemoveDuplicates-6810f093.js","sources":["../../../../Source/Core/arrayRemoveDuplicates.js"],"sourcesContent":["import Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\nconst removeDuplicatesEpsilon = CesiumMath.EPSILON10;\r\n\r\n/**\r\n * Removes adjacent duplicate values in an array of values.\r\n *\r\n * @param {Array.<*>} [values] The array of values.\r\n * @param {Function} equalsEpsilon Function to compare values with an epsilon. Boolean equalsEpsilon(left, right, epsilon).\r\n * @param {Boolean} [wrapAround=false] Compare the last value in the array against the first value. If they are equal, the last value is removed.\r\n * @param {Array.<Number>} [removedIndices=undefined] Store the indices that correspond to the duplicate items removed from the array, if there were any.\r\n * @returns {Array.<*>|undefined} A new array of values with no adjacent duplicate values or the input array if no duplicates were found.\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0), (1.0, 1.0, 1.0)]\r\n * const values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * const nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon);\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\r\n * const values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * const nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\r\n *\r\n * @example\r\n * // Returns [(1.0, 1.0, 1.0), (2.0, 2.0, 2.0), (3.0, 3.0, 3.0)]\r\n * // removedIndices will be equal to [1, 3, 5]\r\n * const values = [\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(2.0, 2.0, 2.0),\r\n *     new Cesium.Cartesian3(3.0, 3.0, 3.0),\r\n *     new Cesium.Cartesian3(1.0, 1.0, 1.0)];\r\n * const nonDuplicatevalues = Cesium.PolylinePipeline.removeDuplicates(values, Cartesian3.equalsEpsilon, true);\r\n * @private\r\n */\r\nfunction arrayRemoveDuplicates(\r\n  values,\r\n  equalsEpsilon,\r\n  wrapAround,\r\n  removedIndices\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"equalsEpsilon\", equalsEpsilon);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(values)) {\r\n    return undefined;\r\n  }\r\n\r\n  wrapAround = defaultValue(wrapAround, false);\r\n  const storeRemovedIndices = defined(removedIndices);\r\n\r\n  const length = values.length;\r\n  if (length < 2) {\r\n    return values;\r\n  }\r\n\r\n  let i;\r\n  let v0 = values[0];\r\n  let v1;\r\n\r\n  // We only want to create a new array if there are duplicates in the array.\r\n  // As such, cleanedValues is undefined until it encounters the first duplicate, if it exists.\r\n  let cleanedValues;\r\n  let lastCleanIndex = 0;\r\n\r\n  // removedIndexLCI keeps track of where lastCleanIndex would be if it were sorted into the removedIndices array.\r\n  // In case of arrays such as [A, B, C, ..., A, A, A], removedIndices will not be sorted properly without this.\r\n  let removedIndexLCI = -1;\r\n\r\n  for (i = 1; i < length; ++i) {\r\n    v1 = values[i];\r\n    if (equalsEpsilon(v0, v1, removeDuplicatesEpsilon)) {\r\n      if (!defined(cleanedValues)) {\r\n        cleanedValues = values.slice(0, i);\r\n        lastCleanIndex = i - 1;\r\n        removedIndexLCI = 0;\r\n      }\r\n      if (storeRemovedIndices) {\r\n        removedIndices.push(i);\r\n      }\r\n    } else {\r\n      if (defined(cleanedValues)) {\r\n        cleanedValues.push(v1);\r\n        lastCleanIndex = i;\r\n        if (storeRemovedIndices) {\r\n          removedIndexLCI = removedIndices.length;\r\n        }\r\n      }\r\n      v0 = v1;\r\n    }\r\n  }\r\n\r\n  if (\r\n    wrapAround &&\r\n    equalsEpsilon(values[0], values[length - 1], removeDuplicatesEpsilon)\r\n  ) {\r\n    if (storeRemovedIndices) {\r\n      if (defined(cleanedValues)) {\r\n        removedIndices.splice(removedIndexLCI, 0, lastCleanIndex);\r\n      } else {\r\n        removedIndices.push(length - 1);\r\n      }\r\n    }\r\n\r\n    if (defined(cleanedValues)) {\r\n      cleanedValues.length -= 1;\r\n    } else {\r\n      cleanedValues = values.slice(0, -1);\r\n    }\r\n  }\r\n\r\n  return defined(cleanedValues) ? cleanedValues : values;\r\n}\r\n\r\nexport default arrayRemoveDuplicates;\r\n"],"names":["removeDuplicatesEpsilon","CesiumMath","EPSILON10","values","equalsEpsilon","wrapAround","removedIndices","Check","defined","defaultValue","storeRemovedIndices","length","i","v1","cleanedValues","v0","lastCleanIndex","removedIndexLCI","slice","push","splice"],"mappings":"sIAKA,MAAMA,EAA0BC,EAAUA,WAACC,kCA4C3C,SACEC,EACAC,EACAC,EACAC,GAMA,GAHAC,EAAAA,MAAMC,QAAQ,gBAAiBJ,IAG1BI,EAAAA,QAAQL,GACX,OAGFE,EAAaI,EAAYA,aAACJ,GAAY,GACtC,MAAMK,EAAsBF,UAAQF,GAE9BK,EAASR,EAAOQ,OACtB,GAAIA,EAAS,EACX,OAAOR,EAGT,IAAIS,EAEAC,EAIAC,EALAC,EAAKZ,EAAO,GAMZa,EAAiB,EAIjBC,GAAmB,EAEvB,IAAKL,EAAI,EAAGA,EAAID,IAAUC,EACxBC,EAAKV,EAAOS,GACRR,EAAcW,EAAIF,EAAIb,IACnBQ,EAAAA,QAAQM,KACXA,EAAgBX,EAAOe,MAAM,EAAGN,GAChCI,EAAiBJ,EAAI,EACrBK,EAAkB,GAEhBP,GACFJ,EAAea,KAAKP,KAGlBJ,EAAAA,QAAQM,KACVA,EAAcK,KAAKN,GACnBG,EAAiBJ,EACbF,IACFO,EAAkBX,EAAeK,SAGrCI,EAAKF,GAuBT,OAlBER,GACAD,EAAcD,EAAO,GAAIA,EAAOQ,EAAS,GAAIX,KAEzCU,IACEF,EAAAA,QAAQM,GACVR,EAAec,OAAOH,EAAiB,EAAGD,GAE1CV,EAAea,KAAKR,EAAS,IAI7BH,EAAAA,QAAQM,GACVA,EAAcH,QAAU,EAExBG,EAAgBX,EAAOe,MAAM,GAAI,IAI9BV,UAAQM,GAAiBA,EAAgBX"}