define(["./GeometryOffsetAttribute-bae60293","./arrayRemoveDuplicates-6810f093","./Transforms-f586e93e","./Matrix2-fb98ca95","./RuntimeError-ac440aa5","./ComponentDatatype-7ed489c0","./PolylineVolumeGeometryLibrary-7ee3dcd3","./CorridorGeometryLibrary-8e3ed7e2","./defaultValue-69ee94f4","./GeometryAttribute-c6fd2455","./GeometryAttributes-1b4134a9","./IndexDatatype-b58b63e4","./PolygonPipeline-1b3c3695","./VertexFormat-c648f71f","./_commonjsHelpers-3aae1032-15991586","./combine-0259f56f","./WebGLConstants-f63312fc","./EllipsoidTangentPlane-97c09048","./AxisAlignedBoundingBox-a31690ee","./IntersectionTests-2d241d2b","./Plane-a09326f5","./PolylinePipeline-8738a2dd","./EllipsoidGeodesic-093468e6","./EllipsoidRhumbLine-99a9f0c8"],(function(t,e,r,a,i,o,n,s,l,d,u,c,m,f,y,p,h,g,C,b,A,_,w,v){"use strict";const T=new a.Cartesian3,G=new a.Cartesian3,E=new a.Cartesian3,V=new a.Cartesian3,x=new a.Cartesian3,F=new a.Cartesian3,L=new a.Cartesian3,P=new a.Cartesian3;function N(t,e){for(let r=0;r<t.length;r++)t[r]=e.scaleToGeodeticSurface(t[r],t[r]);return t}function D(t,e,r,i,o,n){const l=t.normals,d=t.tangents,u=t.bitangents,c=a.Cartesian3.normalize(a.Cartesian3.cross(r,e,L),L);n.normal&&s.CorridorGeometryLibrary.addAttribute(l,e,i,o),n.tangent&&s.CorridorGeometryLibrary.addAttribute(d,c,i,o),n.bitangent&&s.CorridorGeometryLibrary.addAttribute(u,r,i,o)}function M(t,e,r){const i=t.positions,n=t.corners,m=t.endPositions,f=t.lefts,y=t.normals,p=new u.GeometryAttributes;let h,g,C,b=0,A=0,_=0;for(g=0;g<i.length;g+=2)C=i[g].length-3,b+=C,_+=2*C,A+=i[g+1].length-3;for(b+=3,A+=3,g=0;g<n.length;g++){h=n[g];const t=n[g].leftPositions;l.defined(t)?(C=t.length,b+=C,_+=C):(C=n[g].rightPositions.length,A+=C,_+=C)}const w=l.defined(m);let v;w&&(v=m[0].length-3,b+=v,A+=v,v/=3,_+=6*v);const x=b+A,N=new Float64Array(x),M={normals:e.normal?new Float32Array(x):void 0,tangents:e.tangent?new Float32Array(x):void 0,bitangents:e.bitangent?new Float32Array(x):void 0};let O,I,k,S,R,H,z=0,B=x-1,U=T,Y=G;const W=v/2,q=c.IndexDatatype.createTypedArray(x/3,_);let j=0;if(w){H=E,R=V;const t=m[0];for(U=a.Cartesian3.fromArray(y,0,U),Y=a.Cartesian3.fromArray(f,0,Y),g=0;g<W;g++)H=a.Cartesian3.fromArray(t,3*(W-1-g),H),R=a.Cartesian3.fromArray(t,3*(W+g),R),s.CorridorGeometryLibrary.addAttribute(N,R,z),s.CorridorGeometryLibrary.addAttribute(N,H,void 0,B),D(M,U,Y,z,B,e),I=z/3,S=I+1,O=(B-2)/3,k=O-1,q[j++]=O,q[j++]=I,q[j++]=k,q[j++]=k,q[j++]=I,q[j++]=S,z+=3,B-=3}let J,K,Q=0,X=0,Z=i[Q++],$=i[Q++];for(N.set(Z,z),N.set($,B-$.length+1),Y=a.Cartesian3.fromArray(f,X,Y),C=$.length-3,g=0;g<C;g+=3)J=r.geodeticSurfaceNormal(a.Cartesian3.fromArray(Z,g,L),L),K=r.geodeticSurfaceNormal(a.Cartesian3.fromArray($,C-g,P),P),U=a.Cartesian3.normalize(a.Cartesian3.add(J,K,U),U),D(M,U,Y,z,B,e),I=z/3,S=I+1,O=(B-2)/3,k=O-1,q[j++]=O,q[j++]=I,q[j++]=k,q[j++]=k,q[j++]=I,q[j++]=S,z+=3,B-=3;for(J=r.geodeticSurfaceNormal(a.Cartesian3.fromArray(Z,C,L),L),K=r.geodeticSurfaceNormal(a.Cartesian3.fromArray($,C,P),P),U=a.Cartesian3.normalize(a.Cartesian3.add(J,K,U),U),X+=3,g=0;g<n.length;g++){let t;h=n[g];const o=h.leftPositions,d=h.rightPositions;let u,c,m=F,p=E,b=V;if(U=a.Cartesian3.fromArray(y,X,U),l.defined(o)){for(D(M,U,Y,void 0,B,e),B-=3,u=S,c=k,t=0;t<o.length/3;t++)m=a.Cartesian3.fromArray(o,3*t,m),q[j++]=u,q[j++]=c-t-1,q[j++]=c-t,s.CorridorGeometryLibrary.addAttribute(N,m,void 0,B),p=a.Cartesian3.fromArray(N,3*(c-t-1),p),b=a.Cartesian3.fromArray(N,3*u,b),Y=a.Cartesian3.normalize(a.Cartesian3.subtract(p,b,Y),Y),D(M,U,Y,void 0,B,e),B-=3;m=a.Cartesian3.fromArray(N,3*u,m),p=a.Cartesian3.subtract(a.Cartesian3.fromArray(N,3*c,p),m,p),b=a.Cartesian3.subtract(a.Cartesian3.fromArray(N,3*(c-t),b),m,b),Y=a.Cartesian3.normalize(a.Cartesian3.add(p,b,Y),Y),D(M,U,Y,z,void 0,e),z+=3}else{for(D(M,U,Y,z,void 0,e),z+=3,u=k,c=S,t=0;t<d.length/3;t++)m=a.Cartesian3.fromArray(d,3*t,m),q[j++]=u,q[j++]=c+t,q[j++]=c+t+1,s.CorridorGeometryLibrary.addAttribute(N,m,z),p=a.Cartesian3.fromArray(N,3*u,p),b=a.Cartesian3.fromArray(N,3*(c+t),b),Y=a.Cartesian3.normalize(a.Cartesian3.subtract(p,b,Y),Y),D(M,U,Y,z,void 0,e),z+=3;m=a.Cartesian3.fromArray(N,3*u,m),p=a.Cartesian3.subtract(a.Cartesian3.fromArray(N,3*(c+t),p),m,p),b=a.Cartesian3.subtract(a.Cartesian3.fromArray(N,3*c,b),m,b),Y=a.Cartesian3.normalize(a.Cartesian3.negate(a.Cartesian3.add(b,p,Y),Y),Y),D(M,U,Y,void 0,B,e),B-=3}for(Z=i[Q++],$=i[Q++],Z.splice(0,3),$.splice($.length-3,3),N.set(Z,z),N.set($,B-$.length+1),C=$.length-3,X+=3,Y=a.Cartesian3.fromArray(f,X,Y),t=0;t<$.length;t+=3)J=r.geodeticSurfaceNormal(a.Cartesian3.fromArray(Z,t,L),L),K=r.geodeticSurfaceNormal(a.Cartesian3.fromArray($,C-t,P),P),U=a.Cartesian3.normalize(a.Cartesian3.add(J,K,U),U),D(M,U,Y,z,B,e),S=z/3,I=S-1,k=(B-2)/3,O=k+1,q[j++]=O,q[j++]=I,q[j++]=k,q[j++]=k,q[j++]=I,q[j++]=S,z+=3,B-=3;z-=3,B+=3}if(U=a.Cartesian3.fromArray(y,y.length-3,U),D(M,U,Y,z,B,e),w){z+=3,B-=3,H=E,R=V;const t=m[1];for(g=0;g<W;g++)H=a.Cartesian3.fromArray(t,3*(v-g-1),H),R=a.Cartesian3.fromArray(t,3*g,R),s.CorridorGeometryLibrary.addAttribute(N,H,void 0,B),s.CorridorGeometryLibrary.addAttribute(N,R,z),D(M,U,Y,z,B,e),S=z/3,I=S-1,k=(B-2)/3,O=k+1,q[j++]=O,q[j++]=I,q[j++]=k,q[j++]=k,q[j++]=I,q[j++]=S,z+=3,B-=3}if(p.position=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:N}),e.st){const t=new Float32Array(x/3*2);let e,r,a=0;if(w){b/=3,A/=3;const i=Math.PI/(v+1);let n;r=1/(b-v+1),e=1/(A-v+1);const s=v/2;for(g=s+1;g<v+1;g++)n=o.CesiumMath.PI_OVER_TWO+i*g,t[a++]=e*(1+Math.cos(n)),t[a++]=.5*(1+Math.sin(n));for(g=1;g<A-v+1;g++)t[a++]=g*e,t[a++]=0;for(g=v;g>s;g--)n=o.CesiumMath.PI_OVER_TWO-g*i,t[a++]=1-e*(1+Math.cos(n)),t[a++]=.5*(1+Math.sin(n));for(g=s;g>0;g--)n=o.CesiumMath.PI_OVER_TWO-i*g,t[a++]=1-r*(1+Math.cos(n)),t[a++]=.5*(1+Math.sin(n));for(g=b-v;g>0;g--)t[a++]=g*r,t[a++]=1;for(g=1;g<s+1;g++)n=o.CesiumMath.PI_OVER_TWO+i*g,t[a++]=r*(1+Math.cos(n)),t[a++]=.5*(1+Math.sin(n))}else{for(b/=3,A/=3,r=1/(b-1),e=1/(A-1),g=0;g<A;g++)t[a++]=g*e,t[a++]=0;for(g=b;g>0;g--)t[a++]=(g-1)*r,t[a++]=1}p.st=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:t})}return e.normal&&(p.normal=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:M.normals})),e.tangent&&(p.tangent=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:M.tangents})),e.bitangent&&(p.bitangent=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:M.bitangents})),{attributes:p,indices:q}}function O(t,e,r){r[e++]=t[0],r[e++]=t[1],r[e++]=t[2];for(let a=3;a<t.length;a+=3){const i=t[a],o=t[a+1],n=t[a+2];r[e++]=i,r[e++]=o,r[e++]=n,r[e++]=i,r[e++]=o,r[e++]=n}return r[e++]=t[0],r[e++]=t[1],r[e++]=t[2],r}function I(e,r){const i=new f.VertexFormat({position:r.position,normal:r.normal||r.bitangent||e.shadowVolume,tangent:r.tangent,bitangent:r.normal||r.bitangent,st:r.st}),n=e.ellipsoid,u=M(s.CorridorGeometryLibrary.computePositions(e),i,n),y=e.height,p=e.extrudedHeight;let h=u.attributes;const g=u.indices;let C=h.position.values,b=C.length;const A=new Float64Array(6*b);let _=new Float64Array(b);_.set(C);let w,v=new Float64Array(4*b);C=m.PolygonPipeline.scaleToGeodeticHeight(C,y,n),v=O(C,0,v),_=m.PolygonPipeline.scaleToGeodeticHeight(_,p,n),v=O(_,2*b,v),A.set(C),A.set(_,b),A.set(v,2*b),h.position.values=A,h=function(t,e){if(!(e.normal||e.tangent||e.bitangent||e.st))return t;const r=t.position.values;let i,o;(e.normal||e.bitangent)&&(i=t.normal.values,o=t.bitangent.values);const n=t.position.values.length/18,l=3*n,d=2*n,u=2*l;let c;if(e.normal||e.bitangent||e.tangent){const n=e.normal?new Float32Array(6*l):void 0,d=e.tangent?new Float32Array(6*l):void 0,m=e.bitangent?new Float32Array(6*l):void 0;let f=T,y=G,p=E,h=V,g=x,C=F,b=u;for(c=0;c<l;c+=3){const t=b+u;f=a.Cartesian3.fromArray(r,c,f),y=a.Cartesian3.fromArray(r,c+l,y),p=a.Cartesian3.fromArray(r,(c+3)%l,p),y=a.Cartesian3.subtract(y,f,y),p=a.Cartesian3.subtract(p,f,p),h=a.Cartesian3.normalize(a.Cartesian3.cross(y,p,h),h),e.normal&&(s.CorridorGeometryLibrary.addAttribute(n,h,t),s.CorridorGeometryLibrary.addAttribute(n,h,t+3),s.CorridorGeometryLibrary.addAttribute(n,h,b),s.CorridorGeometryLibrary.addAttribute(n,h,b+3)),(e.tangent||e.bitangent)&&(C=a.Cartesian3.fromArray(i,c,C),e.bitangent&&(s.CorridorGeometryLibrary.addAttribute(m,C,t),s.CorridorGeometryLibrary.addAttribute(m,C,t+3),s.CorridorGeometryLibrary.addAttribute(m,C,b),s.CorridorGeometryLibrary.addAttribute(m,C,b+3)),e.tangent&&(g=a.Cartesian3.normalize(a.Cartesian3.cross(C,h,g),g),s.CorridorGeometryLibrary.addAttribute(d,g,t),s.CorridorGeometryLibrary.addAttribute(d,g,t+3),s.CorridorGeometryLibrary.addAttribute(d,g,b),s.CorridorGeometryLibrary.addAttribute(d,g,b+3))),b+=6}if(e.normal){for(n.set(i),c=0;c<l;c+=3)n[c+l]=-i[c],n[c+l+1]=-i[c+1],n[c+l+2]=-i[c+2];t.normal.values=n}else t.normal=void 0;if(e.bitangent?(m.set(o),m.set(o,l),t.bitangent.values=m):t.bitangent=void 0,e.tangent){const e=t.tangent.values;d.set(e),d.set(e,l),t.tangent.values=d}}if(e.st){const e=t.st.values,r=new Float32Array(6*d);r.set(e),r.set(e,d);let a=2*d;for(let t=0;t<2;t++){for(r[a++]=e[0],r[a++]=e[1],c=2;c<d;c+=2){const t=e[c],i=e[c+1];r[a++]=t,r[a++]=i,r[a++]=t,r[a++]=i}r[a++]=e[0],r[a++]=e[1]}t.st.values=r}return t}(h,r);const L=b/3;if(e.shadowVolume){const t=h.normal.values;b=t.length;let e=new Float32Array(6*b);for(w=0;w<b;w++)t[w]=-t[w];e.set(t,b),e=O(t,4*b,e),h.extrudeDirection=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e}),r.normal||(h.normal=void 0)}if(l.defined(e.offsetAttribute)){let r=new Uint8Array(6*L);if(e.offsetAttribute===t.GeometryOffsetAttribute.TOP)r=t.arrayFill(r,1,0,L),r=t.arrayFill(r,1,2*L,4*L);else{const a=e.offsetAttribute===t.GeometryOffsetAttribute.NONE?0:1;r=t.arrayFill(r,a)}h.applyOffset=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:r})}const P=g.length,N=L+L,D=c.IndexDatatype.createTypedArray(A.length/3,2*P+3*N);D.set(g);let I,k,S,R,H=P;for(w=0;w<P;w+=3){const t=g[w],e=g[w+1],r=g[w+2];D[H++]=r+L,D[H++]=e+L,D[H++]=t+L}for(w=0;w<N;w+=2)I=w+N,k=I+N,S=I+1,R=k+1,D[H++]=I,D[H++]=k,D[H++]=S,D[H++]=S,D[H++]=k,D[H++]=R;return{attributes:h,indices:D}}const k=new a.Cartesian3,S=new a.Cartesian3,R=new a.Cartographic;function H(t,e,r,i,o,n){const s=a.Cartesian3.subtract(e,t,k);a.Cartesian3.normalize(s,s);const l=r.geodeticSurfaceNormal(t,S),d=a.Cartesian3.cross(s,l,k);a.Cartesian3.multiplyByScalar(d,i,d);let u=o.latitude,c=o.longitude,m=n.latitude,f=n.longitude;a.Cartesian3.add(t,d,S),r.cartesianToCartographic(S,R);let y=R.latitude,p=R.longitude;u=Math.min(u,y),c=Math.min(c,p),m=Math.max(m,y),f=Math.max(f,p),a.Cartesian3.subtract(t,d,S),r.cartesianToCartographic(S,R),y=R.latitude,p=R.longitude,u=Math.min(u,y),c=Math.min(c,p),m=Math.max(m,y),f=Math.max(f,p),o.latitude=u,o.longitude=c,n.latitude=m,n.longitude=f}const z=new a.Cartesian3,B=new a.Cartesian3,U=new a.Cartographic,Y=new a.Cartographic;function W(t,r,i,o,s){t=N(t,r);const d=e.arrayRemoveDuplicates(t,a.Cartesian3.equalsEpsilon),u=d.length;if(u<2||i<=0)return new a.Rectangle;const c=.5*i;let m,f;if(U.latitude=Number.POSITIVE_INFINITY,U.longitude=Number.POSITIVE_INFINITY,Y.latitude=Number.NEGATIVE_INFINITY,Y.longitude=Number.NEGATIVE_INFINITY,o===n.CornerType.ROUNDED){const t=d[0];a.Cartesian3.subtract(t,d[1],z),a.Cartesian3.normalize(z,z),a.Cartesian3.multiplyByScalar(z,c,z),a.Cartesian3.add(t,z,B),r.cartesianToCartographic(B,R),m=R.latitude,f=R.longitude,U.latitude=Math.min(U.latitude,m),U.longitude=Math.min(U.longitude,f),Y.latitude=Math.max(Y.latitude,m),Y.longitude=Math.max(Y.longitude,f)}for(let t=0;t<u-1;++t)H(d[t],d[t+1],r,c,U,Y);const y=d[u-1];a.Cartesian3.subtract(y,d[u-2],z),a.Cartesian3.normalize(z,z),a.Cartesian3.multiplyByScalar(z,c,z),a.Cartesian3.add(y,z,B),H(y,B,r,c,U,Y),o===n.CornerType.ROUNDED&&(r.cartesianToCartographic(B,R),m=R.latitude,f=R.longitude,U.latitude=Math.min(U.latitude,m),U.longitude=Math.min(U.longitude,f),Y.latitude=Math.max(Y.latitude,m),Y.longitude=Math.max(Y.longitude,f));const p=l.defined(s)?s:new a.Rectangle;return p.north=Y.latitude,p.south=U.latitude,p.east=Y.longitude,p.west=U.longitude,p}function q(t){const e=(t=l.defaultValue(t,l.defaultValue.EMPTY_OBJECT)).positions,r=t.width;i.Check.defined("options.positions",e),i.Check.defined("options.width",r);const s=l.defaultValue(t.height,0),d=l.defaultValue(t.extrudedHeight,s);this._positions=e,this._ellipsoid=a.Ellipsoid.clone(l.defaultValue(t.ellipsoid,a.Ellipsoid.WGS84)),this._vertexFormat=f.VertexFormat.clone(l.defaultValue(t.vertexFormat,f.VertexFormat.DEFAULT)),this._width=r,this._height=Math.max(s,d),this._extrudedHeight=Math.min(s,d),this._cornerType=l.defaultValue(t.cornerType,n.CornerType.ROUNDED),this._granularity=l.defaultValue(t.granularity,o.CesiumMath.RADIANS_PER_DEGREE),this._shadowVolume=l.defaultValue(t.shadowVolume,!1),this._workerName="createCorridorGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this.packedLength=1+e.length*a.Cartesian3.packedLength+a.Ellipsoid.packedLength+f.VertexFormat.packedLength+7}q.pack=function(t,e,r){i.Check.defined("value",t),i.Check.defined("array",e),r=l.defaultValue(r,0);const o=t._positions,n=o.length;e[r++]=n;for(let t=0;t<n;++t,r+=a.Cartesian3.packedLength)a.Cartesian3.pack(o[t],e,r);return a.Ellipsoid.pack(t._ellipsoid,e,r),r+=a.Ellipsoid.packedLength,f.VertexFormat.pack(t._vertexFormat,e,r),r+=f.VertexFormat.packedLength,e[r++]=t._width,e[r++]=t._height,e[r++]=t._extrudedHeight,e[r++]=t._cornerType,e[r++]=t._granularity,e[r++]=t._shadowVolume?1:0,e[r]=l.defaultValue(t._offsetAttribute,-1),e};const j=a.Ellipsoid.clone(a.Ellipsoid.UNIT_SPHERE),J=new f.VertexFormat,K={positions:void 0,ellipsoid:j,vertexFormat:J,width:void 0,height:void 0,extrudedHeight:void 0,cornerType:void 0,granularity:void 0,shadowVolume:void 0,offsetAttribute:void 0};return q.unpack=function(t,e,r){i.Check.defined("array",t),e=l.defaultValue(e,0);const o=t[e++],n=new Array(o);for(let r=0;r<o;++r,e+=a.Cartesian3.packedLength)n[r]=a.Cartesian3.unpack(t,e);const s=a.Ellipsoid.unpack(t,e,j);e+=a.Ellipsoid.packedLength;const d=f.VertexFormat.unpack(t,e,J);e+=f.VertexFormat.packedLength;const u=t[e++],c=t[e++],m=t[e++],y=t[e++],p=t[e++],h=1===t[e++],g=t[e];return l.defined(r)?(r._positions=n,r._ellipsoid=a.Ellipsoid.clone(s,r._ellipsoid),r._vertexFormat=f.VertexFormat.clone(d,r._vertexFormat),r._width=u,r._height=c,r._extrudedHeight=m,r._cornerType=y,r._granularity=p,r._shadowVolume=h,r._offsetAttribute=-1===g?void 0:g,r):(K.positions=n,K.width=u,K.height=c,K.extrudedHeight=m,K.cornerType=y,K.granularity=p,K.shadowVolume=h,K.offsetAttribute=-1===g?void 0:g,new q(K))},q.computeRectangle=function(t,e){const r=(t=l.defaultValue(t,l.defaultValue.EMPTY_OBJECT)).positions,o=t.width;i.Check.defined("options.positions",r),i.Check.defined("options.width",o);return W(r,l.defaultValue(t.ellipsoid,a.Ellipsoid.WGS84),o,l.defaultValue(t.cornerType,n.CornerType.ROUNDED),e)},q.createGeometry=function(i){let n=i._positions;const u=i._width,c=i._ellipsoid;n=N(n,c);const f=e.arrayRemoveDuplicates(n,a.Cartesian3.equalsEpsilon);if(f.length<2||u<=0)return;const y=i._height,p=i._extrudedHeight,h=!o.CesiumMath.equalsEpsilon(y,p,0,o.CesiumMath.EPSILON2),g=i._vertexFormat,C={ellipsoid:c,positions:f,width:u,cornerType:i._cornerType,granularity:i._granularity,saveAttributes:!0};let b;if(h)C.height=y,C.extrudedHeight=p,C.shadowVolume=i._shadowVolume,C.offsetAttribute=i._offsetAttribute,b=I(C,g);else{if(b=M(s.CorridorGeometryLibrary.computePositions(C),g,c),b.attributes.position.values=m.PolygonPipeline.scaleToGeodeticHeight(b.attributes.position.values,y,c),l.defined(i._offsetAttribute)){const e=i._offsetAttribute===t.GeometryOffsetAttribute.NONE?0:1,r=b.attributes.position.values.length,a=new Uint8Array(r/3);t.arrayFill(a,e),b.attributes.applyOffset=new d.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:a})}}const A=b.attributes,_=r.BoundingSphere.fromVertices(A.position.values,void 0,3);return g.position||(b.attributes.position.values=void 0),new d.Geometry({attributes:A,indices:b.indices,primitiveType:d.PrimitiveType.TRIANGLES,boundingSphere:_,offsetAttribute:i._offsetAttribute})},q.createShadowVolume=function(t,e,r){const a=t._granularity,i=t._ellipsoid,o=e(a,i),n=r(a,i);return new q({positions:t._positions,width:t._width,cornerType:t._cornerType,ellipsoid:i,granularity:a,extrudedHeight:o,height:n,vertexFormat:f.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(q.prototype,{rectangle:{get:function(){return l.defined(this._rectangle)||(this._rectangle=W(this._positions,this._ellipsoid,this._width,this._cornerType)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return[0,0,0,1,1,0]}}}),function(t,e){return l.defined(e)&&(t=q.unpack(t,e)),t._ellipsoid=a.Ellipsoid.clone(t._ellipsoid),q.createGeometry(t)}}));
//# sourceMappingURL=createCorridorGeometry.js.map
