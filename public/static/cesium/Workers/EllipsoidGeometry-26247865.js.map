{"version":3,"file":"EllipsoidGeometry-26247865.js","sources":["../../../../Source/Core/EllipsoidGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nconst scratchPosition = new Cartesian3();\r\nconst scratchNormal = new Cartesian3();\r\nconst scratchTangent = new Cartesian3();\r\nconst scratchBitangent = new Cartesian3();\r\nconst scratchNormalST = new Cartesian3();\r\nconst defaultRadii = new Cartesian3(1.0, 1.0, 1.0);\r\n\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\n\r\n/**\r\n * A description of an ellipsoid centered at the origin.\r\n *\r\n * @alias EllipsoidGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Cartesian3} [options.radii=Cartesian3(1.0, 1.0, 1.0)] The radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Cartesian3} [options.innerRadii=options.radii] The inner radii of the ellipsoid in the x, y, and z directions.\r\n * @param {Number} [options.minimumClock=0.0] The minimum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.maximumClock=2*PI] The maximum angle lying in the xy-plane measured from the positive x-axis and toward the positive y-axis.\r\n * @param {Number} [options.minimumCone=0.0] The minimum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.maximumCone=PI] The maximum angle measured from the positive z-axis and toward the negative z-axis.\r\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n *\r\n * @see EllipsoidGeometry#createGeometry\r\n *\r\n * @example\r\n * const ellipsoid = new Cesium.EllipsoidGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   radii : new Cesium.Cartesian3(1000000.0, 500000.0, 500000.0)\r\n * });\r\n * const geometry = Cesium.EllipsoidGeometry.createGeometry(ellipsoid);\r\n */\r\nfunction EllipsoidGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  const radii = defaultValue(options.radii, defaultRadii);\r\n  const innerRadii = defaultValue(options.innerRadii, radii);\r\n  const minimumClock = defaultValue(options.minimumClock, 0.0);\r\n  const maximumClock = defaultValue(options.maximumClock, CesiumMath.TWO_PI);\r\n  const minimumCone = defaultValue(options.minimumCone, 0.0);\r\n  const maximumCone = defaultValue(options.maximumCone, CesiumMath.PI);\r\n  const stackPartitions = Math.round(defaultValue(options.stackPartitions, 64));\r\n  const slicePartitions = Math.round(defaultValue(options.slicePartitions, 64));\r\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (slicePartitions < 3) {\r\n    throw new DeveloperError(\r\n      \"options.slicePartitions cannot be less than three.\"\r\n    );\r\n  }\r\n  if (stackPartitions < 3) {\r\n    throw new DeveloperError(\r\n      \"options.stackPartitions cannot be less than three.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._radii = Cartesian3.clone(radii);\r\n  this._innerRadii = Cartesian3.clone(innerRadii);\r\n  this._minimumClock = minimumClock;\r\n  this._maximumClock = maximumClock;\r\n  this._minimumCone = minimumCone;\r\n  this._maximumCone = maximumCone;\r\n  this._stackPartitions = stackPartitions;\r\n  this._slicePartitions = slicePartitions;\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createEllipsoidGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipsoidGeometry.packedLength =\r\n  2 * Cartesian3.packedLength + VertexFormat.packedLength + 7;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {EllipsoidGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipsoidGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  Cartesian3.pack(value._radii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  Cartesian3.pack(value._innerRadii, array, startingIndex);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._minimumClock;\r\n  array[startingIndex++] = value._maximumClock;\r\n  array[startingIndex++] = value._minimumCone;\r\n  array[startingIndex++] = value._maximumCone;\r\n  array[startingIndex++] = value._stackPartitions;\r\n  array[startingIndex++] = value._slicePartitions;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchRadii = new Cartesian3();\r\nconst scratchInnerRadii = new Cartesian3();\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  radii: scratchRadii,\r\n  innerRadii: scratchInnerRadii,\r\n  vertexFormat: scratchVertexFormat,\r\n  minimumClock: undefined,\r\n  maximumClock: undefined,\r\n  minimumCone: undefined,\r\n  maximumCone: undefined,\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {EllipsoidGeometry} [result] The object into which to store the result.\r\n * @returns {EllipsoidGeometry} The modified result parameter or a new EllipsoidGeometry instance if one was not provided.\r\n */\r\nEllipsoidGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const radii = Cartesian3.unpack(array, startingIndex, scratchRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const innerRadii = Cartesian3.unpack(array, startingIndex, scratchInnerRadii);\r\n  startingIndex += Cartesian3.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const minimumClock = array[startingIndex++];\r\n  const maximumClock = array[startingIndex++];\r\n  const minimumCone = array[startingIndex++];\r\n  const maximumCone = array[startingIndex++];\r\n  const stackPartitions = array[startingIndex++];\r\n  const slicePartitions = array[startingIndex++];\r\n  const offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.minimumClock = minimumClock;\r\n    scratchOptions.maximumClock = maximumClock;\r\n    scratchOptions.minimumCone = minimumCone;\r\n    scratchOptions.maximumCone = maximumCone;\r\n    scratchOptions.stackPartitions = stackPartitions;\r\n    scratchOptions.slicePartitions = slicePartitions;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new EllipsoidGeometry(scratchOptions);\r\n  }\r\n\r\n  result._radii = Cartesian3.clone(radii, result._radii);\r\n  result._innerRadii = Cartesian3.clone(innerRadii, result._innerRadii);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._minimumClock = minimumClock;\r\n  result._maximumClock = maximumClock;\r\n  result._minimumCone = minimumCone;\r\n  result._maximumCone = maximumCone;\r\n  result._stackPartitions = stackPartitions;\r\n  result._slicePartitions = slicePartitions;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {EllipsoidGeometry} ellipsoidGeometry A description of the ellipsoid.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nEllipsoidGeometry.createGeometry = function (ellipsoidGeometry) {\r\n  const radii = ellipsoidGeometry._radii;\r\n  if (radii.x <= 0 || radii.y <= 0 || radii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const innerRadii = ellipsoidGeometry._innerRadii;\r\n  if (innerRadii.x <= 0 || innerRadii.y <= 0 || innerRadii.z <= 0) {\r\n    return;\r\n  }\r\n\r\n  const minimumClock = ellipsoidGeometry._minimumClock;\r\n  const maximumClock = ellipsoidGeometry._maximumClock;\r\n  const minimumCone = ellipsoidGeometry._minimumCone;\r\n  const maximumCone = ellipsoidGeometry._maximumCone;\r\n  const vertexFormat = ellipsoidGeometry._vertexFormat;\r\n\r\n  // Add an extra slice and stack so that the number of partitions is the\r\n  // number of surfaces rather than the number of joints\r\n  let slicePartitions = ellipsoidGeometry._slicePartitions + 1;\r\n  let stackPartitions = ellipsoidGeometry._stackPartitions + 1;\r\n\r\n  slicePartitions = Math.round(\r\n    (slicePartitions * Math.abs(maximumClock - minimumClock)) /\r\n      CesiumMath.TWO_PI\r\n  );\r\n  stackPartitions = Math.round(\r\n    (stackPartitions * Math.abs(maximumCone - minimumCone)) / CesiumMath.PI\r\n  );\r\n\r\n  if (slicePartitions < 2) {\r\n    slicePartitions = 2;\r\n  }\r\n  if (stackPartitions < 2) {\r\n    stackPartitions = 2;\r\n  }\r\n\r\n  let i;\r\n  let j;\r\n  let index = 0;\r\n\r\n  // Create arrays for theta and phi. Duplicate first and last angle to\r\n  // allow different normals at the intersections.\r\n  const phis = [minimumCone];\r\n  const thetas = [minimumClock];\r\n  for (i = 0; i < stackPartitions; i++) {\r\n    phis.push(\r\n      minimumCone + (i * (maximumCone - minimumCone)) / (stackPartitions - 1)\r\n    );\r\n  }\r\n  phis.push(maximumCone);\r\n  for (j = 0; j < slicePartitions; j++) {\r\n    thetas.push(\r\n      minimumClock + (j * (maximumClock - minimumClock)) / (slicePartitions - 1)\r\n    );\r\n  }\r\n  thetas.push(maximumClock);\r\n  const numPhis = phis.length;\r\n  const numThetas = thetas.length;\r\n\r\n  // Allow for extra indices if there is an inner surface and if we need\r\n  // to close the sides if the clock range is not a full circle\r\n  let extraIndices = 0;\r\n  let vertexMultiplier = 1.0;\r\n  const hasInnerSurface =\r\n    innerRadii.x !== radii.x ||\r\n    innerRadii.y !== radii.y ||\r\n    innerRadii.z !== radii.z;\r\n  let isTopOpen = false;\r\n  let isBotOpen = false;\r\n  let isClockOpen = false;\r\n  if (hasInnerSurface) {\r\n    vertexMultiplier = 2.0;\r\n    if (minimumCone > 0.0) {\r\n      isTopOpen = true;\r\n      extraIndices += slicePartitions - 1;\r\n    }\r\n    if (maximumCone < Math.PI) {\r\n      isBotOpen = true;\r\n      extraIndices += slicePartitions - 1;\r\n    }\r\n    if ((maximumClock - minimumClock) % CesiumMath.TWO_PI) {\r\n      isClockOpen = true;\r\n      extraIndices += (stackPartitions - 1) * 2 + 1;\r\n    } else {\r\n      extraIndices += 1;\r\n    }\r\n  }\r\n\r\n  const vertexCount = numThetas * numPhis * vertexMultiplier;\r\n  const positions = new Float64Array(vertexCount * 3);\r\n  const isInner = arrayFill(new Array(vertexCount), false);\r\n  const negateNormal = arrayFill(new Array(vertexCount), false);\r\n\r\n  // Multiply by 6 because there are two triangles per sector\r\n  const indexCount = slicePartitions * stackPartitions * vertexMultiplier;\r\n  const numIndices =\r\n    6 *\r\n    (indexCount +\r\n      extraIndices +\r\n      1 -\r\n      (slicePartitions + stackPartitions) * vertexMultiplier);\r\n  const indices = IndexDatatype.createTypedArray(indexCount, numIndices);\r\n\r\n  const normals = vertexFormat.normal\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const tangents = vertexFormat.tangent\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const bitangents = vertexFormat.bitangent\r\n    ? new Float32Array(vertexCount * 3)\r\n    : undefined;\r\n  const st = vertexFormat.st ? new Float32Array(vertexCount * 2) : undefined;\r\n\r\n  // Calculate sin/cos phi\r\n  const sinPhi = new Array(numPhis);\r\n  const cosPhi = new Array(numPhis);\r\n  for (i = 0; i < numPhis; i++) {\r\n    sinPhi[i] = sin(phis[i]);\r\n    cosPhi[i] = cos(phis[i]);\r\n  }\r\n\r\n  // Calculate sin/cos theta\r\n  const sinTheta = new Array(numThetas);\r\n  const cosTheta = new Array(numThetas);\r\n  for (j = 0; j < numThetas; j++) {\r\n    cosTheta[j] = cos(thetas[j]);\r\n    sinTheta[j] = sin(thetas[j]);\r\n  }\r\n\r\n  // Create outer surface\r\n  for (i = 0; i < numPhis; i++) {\r\n    for (j = 0; j < numThetas; j++) {\r\n      positions[index++] = radii.x * sinPhi[i] * cosTheta[j];\r\n      positions[index++] = radii.y * sinPhi[i] * sinTheta[j];\r\n      positions[index++] = radii.z * cosPhi[i];\r\n    }\r\n  }\r\n\r\n  // Create inner surface\r\n  let vertexIndex = vertexCount / 2.0;\r\n  if (hasInnerSurface) {\r\n    for (i = 0; i < numPhis; i++) {\r\n      for (j = 0; j < numThetas; j++) {\r\n        positions[index++] = innerRadii.x * sinPhi[i] * cosTheta[j];\r\n        positions[index++] = innerRadii.y * sinPhi[i] * sinTheta[j];\r\n        positions[index++] = innerRadii.z * cosPhi[i];\r\n\r\n        // Keep track of which vertices are the inner and which ones\r\n        // need the normal to be negated\r\n        isInner[vertexIndex] = true;\r\n        if (i > 0 && i !== numPhis - 1 && j !== 0 && j !== numThetas - 1) {\r\n          negateNormal[vertexIndex] = true;\r\n        }\r\n        vertexIndex++;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create indices for outer surface\r\n  index = 0;\r\n  let topOffset;\r\n  let bottomOffset;\r\n  for (i = 1; i < numPhis - 2; i++) {\r\n    topOffset = i * numThetas;\r\n    bottomOffset = (i + 1) * numThetas;\r\n\r\n    for (j = 1; j < numThetas - 2; j++) {\r\n      indices[index++] = bottomOffset + j;\r\n      indices[index++] = bottomOffset + j + 1;\r\n      indices[index++] = topOffset + j + 1;\r\n\r\n      indices[index++] = bottomOffset + j;\r\n      indices[index++] = topOffset + j + 1;\r\n      indices[index++] = topOffset + j;\r\n    }\r\n  }\r\n\r\n  // Create indices for inner surface\r\n  if (hasInnerSurface) {\r\n    const offset = numPhis * numThetas;\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      topOffset = offset + i * numThetas;\r\n      bottomOffset = offset + (i + 1) * numThetas;\r\n\r\n      for (j = 1; j < numThetas - 2; j++) {\r\n        indices[index++] = bottomOffset + j;\r\n        indices[index++] = topOffset + j;\r\n        indices[index++] = topOffset + j + 1;\r\n\r\n        indices[index++] = bottomOffset + j;\r\n        indices[index++] = topOffset + j + 1;\r\n        indices[index++] = bottomOffset + j + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  let outerOffset;\r\n  let innerOffset;\r\n  if (hasInnerSurface) {\r\n    if (isTopOpen) {\r\n      // Connect the top of the inner surface to the top of the outer surface\r\n      innerOffset = numPhis * numThetas;\r\n      for (i = 1; i < numThetas - 2; i++) {\r\n        indices[index++] = i;\r\n        indices[index++] = i + 1;\r\n        indices[index++] = innerOffset + i + 1;\r\n\r\n        indices[index++] = i;\r\n        indices[index++] = innerOffset + i + 1;\r\n        indices[index++] = innerOffset + i;\r\n      }\r\n    }\r\n\r\n    if (isBotOpen) {\r\n      // Connect the bottom of the inner surface to the bottom of the outer surface\r\n      outerOffset = numPhis * numThetas - numThetas;\r\n      innerOffset = numPhis * numThetas * vertexMultiplier - numThetas;\r\n      for (i = 1; i < numThetas - 2; i++) {\r\n        indices[index++] = outerOffset + i + 1;\r\n        indices[index++] = outerOffset + i;\r\n        indices[index++] = innerOffset + i;\r\n\r\n        indices[index++] = outerOffset + i + 1;\r\n        indices[index++] = innerOffset + i;\r\n        indices[index++] = innerOffset + i + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Connect the edges if clock is not closed\r\n  if (isClockOpen) {\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      innerOffset = numThetas * numPhis + numThetas * i;\r\n      outerOffset = numThetas * i;\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = outerOffset;\r\n\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = innerOffset + numThetas;\r\n      indices[index++] = outerOffset + numThetas;\r\n    }\r\n\r\n    for (i = 1; i < numPhis - 2; i++) {\r\n      innerOffset = numThetas * numPhis + numThetas * (i + 1) - 1;\r\n      outerOffset = numThetas * (i + 1) - 1;\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = innerOffset;\r\n      indices[index++] = outerOffset;\r\n\r\n      indices[index++] = outerOffset + numThetas;\r\n      indices[index++] = innerOffset + numThetas;\r\n      indices[index++] = innerOffset;\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes();\r\n\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    });\r\n  }\r\n\r\n  let stIndex = 0;\r\n  let normalIndex = 0;\r\n  let tangentIndex = 0;\r\n  let bitangentIndex = 0;\r\n  const vertexCountHalf = vertexCount / 2.0;\r\n\r\n  let ellipsoid;\r\n  const ellipsoidOuter = Ellipsoid.fromCartesian3(radii);\r\n  const ellipsoidInner = Ellipsoid.fromCartesian3(innerRadii);\r\n\r\n  if (\r\n    vertexFormat.st ||\r\n    vertexFormat.normal ||\r\n    vertexFormat.tangent ||\r\n    vertexFormat.bitangent\r\n  ) {\r\n    for (i = 0; i < vertexCount; i++) {\r\n      ellipsoid = isInner[i] ? ellipsoidInner : ellipsoidOuter;\r\n      const position = Cartesian3.fromArray(positions, i * 3, scratchPosition);\r\n      const normal = ellipsoid.geodeticSurfaceNormal(position, scratchNormal);\r\n      if (negateNormal[i]) {\r\n        Cartesian3.negate(normal, normal);\r\n      }\r\n\r\n      if (vertexFormat.st) {\r\n        const normalST = Cartesian2.negate(normal, scratchNormalST);\r\n        st[stIndex++] =\r\n          Math.atan2(normalST.y, normalST.x) / CesiumMath.TWO_PI + 0.5;\r\n        st[stIndex++] = Math.asin(normal.z) / Math.PI + 0.5;\r\n      }\r\n\r\n      if (vertexFormat.normal) {\r\n        normals[normalIndex++] = normal.x;\r\n        normals[normalIndex++] = normal.y;\r\n        normals[normalIndex++] = normal.z;\r\n      }\r\n\r\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n        const tangent = scratchTangent;\r\n\r\n        // Use UNIT_X for the poles\r\n        let tangetOffset = 0;\r\n        let unit;\r\n        if (isInner[i]) {\r\n          tangetOffset = vertexCountHalf;\r\n        }\r\n        if (\r\n          !isTopOpen &&\r\n          i >= tangetOffset &&\r\n          i < tangetOffset + numThetas * 2\r\n        ) {\r\n          unit = Cartesian3.UNIT_X;\r\n        } else {\r\n          unit = Cartesian3.UNIT_Z;\r\n        }\r\n        Cartesian3.cross(unit, normal, tangent);\r\n        Cartesian3.normalize(tangent, tangent);\r\n\r\n        if (vertexFormat.tangent) {\r\n          tangents[tangentIndex++] = tangent.x;\r\n          tangents[tangentIndex++] = tangent.y;\r\n          tangents[tangentIndex++] = tangent.z;\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n          const bitangent = Cartesian3.cross(normal, tangent, scratchBitangent);\r\n          Cartesian3.normalize(bitangent, bitangent);\r\n\r\n          bitangents[bitangentIndex++] = bitangent.x;\r\n          bitangents[bitangentIndex++] = bitangent.y;\r\n          bitangents[bitangentIndex++] = bitangent.z;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n      attributes.st = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: st,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n      attributes.normal = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normals,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      attributes.tangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: tangents,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      attributes.bitangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: bitangents,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (defined(ellipsoidGeometry._offsetAttribute)) {\r\n    const length = positions.length;\r\n    const applyOffset = new Uint8Array(length / 3);\r\n    const offsetValue =\r\n      ellipsoidGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n        ? 0\r\n        : 1;\r\n    arrayFill(applyOffset, offsetValue);\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: BoundingSphere.fromEllipsoid(ellipsoidOuter),\r\n    offsetAttribute: ellipsoidGeometry._offsetAttribute,\r\n  });\r\n};\r\n\r\nlet unitEllipsoidGeometry;\r\n\r\n/**\r\n * Returns the geometric representation of a unit ellipsoid, including its vertices, indices, and a bounding sphere.\r\n * @returns {Geometry} The computed vertices and indices.\r\n *\r\n * @private\r\n */\r\nEllipsoidGeometry.getUnitEllipsoid = function () {\r\n  if (!defined(unitEllipsoidGeometry)) {\r\n    unitEllipsoidGeometry = EllipsoidGeometry.createGeometry(\r\n      new EllipsoidGeometry({\r\n        radii: new Cartesian3(1.0, 1.0, 1.0),\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n      })\r\n    );\r\n  }\r\n  return unitEllipsoidGeometry;\r\n};\r\nexport default EllipsoidGeometry;\r\n"],"names":["scratchPosition","Cartesian3","scratchNormal","scratchTangent","scratchBitangent","scratchNormalST","defaultRadii","cos","Math","sin","EllipsoidGeometry","options","defaultValue","EMPTY_OBJECT","radii","innerRadii","minimumClock","maximumClock","CesiumMath","TWO_PI","minimumCone","maximumCone","PI","stackPartitions","round","slicePartitions","vertexFormat","VertexFormat","DEFAULT","DeveloperError","this","_radii","clone","_innerRadii","_minimumClock","_maximumClock","_minimumCone","_maximumCone","_stackPartitions","_slicePartitions","_vertexFormat","_offsetAttribute","offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","defined","scratchRadii","scratchInnerRadii","scratchVertexFormat","scratchOptions","undefined","unitEllipsoidGeometry","unpack","result","createGeometry","ellipsoidGeometry","x","y","z","i","j","abs","index","phis","thetas","push","numPhis","length","numThetas","extraIndices","vertexMultiplier","hasInnerSurface","isTopOpen","isBotOpen","isClockOpen","vertexCount","positions","Float64Array","isInner","arrayFill","Array","negateNormal","indexCount","numIndices","indices","IndexDatatype","createTypedArray","normals","normal","Float32Array","tangents","tangent","bitangents","bitangent","st","sinPhi","cosPhi","sinTheta","cosTheta","topOffset","bottomOffset","outerOffset","innerOffset","vertexIndex","offset","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","stIndex","normalIndex","tangentIndex","bitangentIndex","vertexCountHalf","ellipsoid","ellipsoidOuter","Ellipsoid","fromCartesian3","ellipsoidInner","fromArray","geodeticSurfaceNormal","negate","normalST","Cartesian2","atan2","asin","unit","tangetOffset","UNIT_X","UNIT_Z","cross","normalize","FLOAT","applyOffset","Uint8Array","offsetValue","GeometryOffsetAttribute","NONE","UNSIGNED_BYTE","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromEllipsoid","getUnitEllipsoid","POSITION_ONLY"],"mappings":"0VAkBA,MAAMA,EAAkB,IAAIC,EAAAA,WACtBC,EAAgB,IAAID,EAAAA,WACpBE,EAAiB,IAAIF,EAAAA,WACrBG,EAAmB,IAAIH,EAAAA,WACvBI,EAAkB,IAAIJ,EAAAA,WACtBK,EAAe,IAAIL,EAAUA,WAAC,EAAK,EAAK,GAExCM,EAAMC,KAAKD,IACXE,EAAMD,KAAKC,IA+BjB,SAASC,EAAkBC,GACzBA,EAAUC,EAAAA,aAAaD,EAASC,EAAYA,aAACC,cAE7C,MAAMC,EAAQF,EAAYA,aAACD,EAAQG,MAAOR,GACpCS,EAAaH,EAAYA,aAACD,EAAQI,WAAYD,GAC9CE,EAAeJ,EAAYA,aAACD,EAAQK,aAAc,GAClDC,EAAeL,EAAAA,aAAaD,EAAQM,aAAcC,EAAAA,WAAWC,QAC7DC,EAAcR,EAAYA,aAACD,EAAQS,YAAa,GAChDC,EAAcT,EAAAA,aAAaD,EAAQU,YAAaH,EAAAA,WAAWI,IAC3DC,EAAkBf,KAAKgB,MAAMZ,EAAAA,aAAaD,EAAQY,gBAAiB,KACnEE,EAAkBjB,KAAKgB,MAAMZ,EAAAA,aAAaD,EAAQc,gBAAiB,KACnEC,EAAed,EAAAA,aAAaD,EAAQe,aAAcC,EAAAA,aAAaC,SAGrE,GAAIH,EAAkB,EACpB,MAAM,IAAII,EAAcA,eACtB,sDAGJ,GAAIN,EAAkB,EACpB,MAAM,IAAIM,EAAcA,eACtB,sDAKJC,KAAKC,OAAS9B,EAAAA,WAAW+B,MAAMlB,GAC/BgB,KAAKG,YAAchC,EAAAA,WAAW+B,MAAMjB,GACpCe,KAAKI,cAAgBlB,EACrBc,KAAKK,cAAgBlB,EACrBa,KAAKM,aAAehB,EACpBU,KAAKO,aAAehB,EACpBS,KAAKQ,iBAAmBf,EACxBO,KAAKS,iBAAmBd,EACxBK,KAAKU,cAAgBb,EAAAA,aAAaK,MAAMN,GACxCI,KAAKW,iBAAmB9B,EAAQ+B,gBAChCZ,KAAKa,YAAc,0BAOrBjC,EAAkBkC,aAChB,EAAI3C,EAAAA,WAAW2C,aAAejB,EAAAA,aAAaiB,aAAe,EAW5DlC,EAAkBmC,KAAO,SAAUC,EAAOC,EAAOC,GAE/C,IAAKC,EAAAA,QAAQH,GACX,MAAM,IAAIjB,EAAAA,eAAe,qBAE3B,IAAKoB,EAAAA,QAAQF,GACX,MAAM,IAAIlB,EAAAA,eAAe,qBAuB3B,OAnBAmB,EAAgBpC,EAAYA,aAACoC,EAAe,GAE5C/C,EAAUA,WAAC4C,KAAKC,EAAMf,OAAQgB,EAAOC,GACrCA,GAAiB/C,EAAUA,WAAC2C,aAE5B3C,EAAUA,WAAC4C,KAAKC,EAAMb,YAAac,EAAOC,GAC1CA,GAAiB/C,EAAUA,WAAC2C,aAE5BjB,EAAYA,aAACkB,KAAKC,EAAMN,cAAeO,EAAOC,GAC9CA,GAAiBrB,EAAYA,aAACiB,aAE9BG,EAAMC,KAAmBF,EAAMZ,cAC/Ba,EAAMC,KAAmBF,EAAMX,cAC/BY,EAAMC,KAAmBF,EAAMV,aAC/BW,EAAMC,KAAmBF,EAAMT,aAC/BU,EAAMC,KAAmBF,EAAMR,iBAC/BS,EAAMC,KAAmBF,EAAMP,iBAC/BQ,EAAMC,GAAiBpC,EAAYA,aAACkC,EAAML,kBAAmB,GAEtDM,GAGT,MAAMG,EAAe,IAAIjD,EAAAA,WACnBkD,EAAoB,IAAIlD,EAAAA,WACxBmD,EAAsB,IAAIzB,EAAAA,aAC1B0B,EAAiB,CACrBvC,MAAOoC,EACPnC,WAAYoC,EACZzB,aAAc0B,EACdpC,kBAAcsC,EACdrC,kBAAcqC,EACdlC,iBAAakC,EACbjC,iBAAaiC,EACb/B,qBAAiB+B,EACjB7B,qBAAiB6B,EACjBZ,qBAAiBY,GA0dnB,IAAIC,EA/cJ7C,EAAkB8C,OAAS,SAAUT,EAAOC,EAAeS,GAEzD,IAAKR,EAAAA,QAAQF,GACX,MAAM,IAAIlB,EAAAA,eAAe,qBAI3BmB,EAAgBpC,EAAYA,aAACoC,EAAe,GAE5C,MAAMlC,EAAQb,EAAAA,WAAWuD,OAAOT,EAAOC,EAAeE,GACtDF,GAAiB/C,EAAUA,WAAC2C,aAE5B,MAAM7B,EAAad,EAAAA,WAAWuD,OAAOT,EAAOC,EAAeG,GAC3DH,GAAiB/C,EAAUA,WAAC2C,aAE5B,MAAMlB,EAAeC,EAAAA,aAAa6B,OAChCT,EACAC,EACAI,GAEFJ,GAAiBrB,EAAYA,aAACiB,aAE9B,MAAM5B,EAAe+B,EAAMC,KACrB/B,EAAe8B,EAAMC,KACrB5B,EAAc2B,EAAMC,KACpB3B,EAAc0B,EAAMC,KACpBzB,EAAkBwB,EAAMC,KACxBvB,EAAkBsB,EAAMC,KACxBN,EAAkBK,EAAMC,GAE9B,OAAKC,EAAAA,QAAQQ,IAYbA,EAAO1B,OAAS9B,aAAW+B,MAAMlB,EAAO2C,EAAO1B,QAC/C0B,EAAOxB,YAAchC,aAAW+B,MAAMjB,EAAY0C,EAAOxB,aACzDwB,EAAOjB,cAAgBb,eAAaK,MAAMN,EAAc+B,EAAOjB,eAC/DiB,EAAOvB,cAAgBlB,EACvByC,EAAOtB,cAAgBlB,EACvBwC,EAAOrB,aAAehB,EACtBqC,EAAOpB,aAAehB,EACtBoC,EAAOnB,iBAAmBf,EAC1BkC,EAAOlB,iBAAmBd,EAC1BgC,EAAOhB,kBACgB,IAArBC,OAAyBY,EAAYZ,EAEhCe,IAvBLJ,EAAerC,aAAeA,EAC9BqC,EAAepC,aAAeA,EAC9BoC,EAAejC,YAAcA,EAC7BiC,EAAehC,YAAcA,EAC7BgC,EAAe9B,gBAAkBA,EACjC8B,EAAe5B,gBAAkBA,EACjC4B,EAAeX,iBACQ,IAArBA,OAAyBY,EAAYZ,EAChC,IAAIhC,EAAkB2C,KAwBjC3C,EAAkBgD,eAAiB,SAAUC,GAC3C,MAAM7C,EAAQ6C,EAAkB5B,OAChC,GAAIjB,EAAM8C,GAAK,GAAK9C,EAAM+C,GAAK,GAAK/C,EAAMgD,GAAK,EAC7C,OAGF,MAAM/C,EAAa4C,EAAkB1B,YACrC,GAAIlB,EAAW6C,GAAK,GAAK7C,EAAW8C,GAAK,GAAK9C,EAAW+C,GAAK,EAC5D,OAGF,MAAM9C,EAAe2C,EAAkBzB,cACjCjB,EAAe0C,EAAkBxB,cACjCf,EAAcuC,EAAkBvB,aAChCf,EAAcsC,EAAkBtB,aAChCX,EAAeiC,EAAkBnB,cAIvC,IAkBIuB,EACAC,EAnBAvC,EAAkBkC,EAAkBpB,iBAAmB,EACvDhB,EAAkBoC,EAAkBrB,iBAAmB,EAE3Db,EAAkBjB,KAAKgB,MACpBC,EAAkBjB,KAAKyD,IAAIhD,EAAeD,GACzCE,EAAAA,WAAWC,QAEfI,EAAkBf,KAAKgB,MACpBD,EAAkBf,KAAKyD,IAAI5C,EAAcD,GAAgBF,EAAAA,WAAWI,IAGnEG,EAAkB,IACpBA,EAAkB,GAEhBF,EAAkB,IACpBA,EAAkB,GAKpB,IAAI2C,EAAQ,EAIZ,MAAMC,EAAO,CAAC/C,GACRgD,EAAS,CAACpD,GAChB,IAAK+C,EAAI,EAAGA,EAAIxC,EAAiBwC,IAC/BI,EAAKE,KACHjD,EAAe2C,GAAK1C,EAAcD,IAAiBG,EAAkB,IAIzE,IADA4C,EAAKE,KAAKhD,GACL2C,EAAI,EAAGA,EAAIvC,EAAiBuC,IAC/BI,EAAOC,KACLrD,EAAgBgD,GAAK/C,EAAeD,IAAkBS,EAAkB,IAG5E2C,EAAOC,KAAKpD,GACZ,MAAMqD,EAAUH,EAAKI,OACfC,EAAYJ,EAAOG,OAIzB,IAAIE,EAAe,EACfC,EAAmB,EACvB,MAAMC,EACJ5D,EAAW6C,IAAM9C,EAAM8C,GACvB7C,EAAW8C,IAAM/C,EAAM+C,GACvB9C,EAAW+C,IAAMhD,EAAMgD,EACzB,IAAIc,GAAY,EACZC,GAAY,EACZC,GAAc,EACdH,IACFD,EAAmB,EACftD,EAAc,IAChBwD,GAAY,EACZH,GAAgBhD,EAAkB,GAEhCJ,EAAcb,KAAKc,KACrBuD,GAAY,EACZJ,GAAgBhD,EAAkB,IAE/BR,EAAeD,GAAgBE,EAAAA,WAAWC,QAC7C2D,GAAc,EACdL,GAAwC,GAAvBlD,EAAkB,GAAS,GAE5CkD,GAAgB,GAIpB,MAAMM,EAAcP,EAAYF,EAAUI,EACpCM,EAAY,IAAIC,aAA2B,EAAdF,GAC7BG,EAAUC,EAAAA,UAAU,IAAIC,MAAML,IAAc,GAC5CM,EAAeF,EAAAA,UAAU,IAAIC,MAAML,IAAc,GAGjDO,EAAa7D,EAAkBF,EAAkBmD,EACjDa,EACJ,GACCD,EACCb,EACA,GACChD,EAAkBF,GAAmBmD,GACpCc,EAAUC,EAAaA,cAACC,iBAAiBJ,EAAYC,GAErDI,EAAUjE,EAAakE,OACzB,IAAIC,aAA2B,EAAdd,QACjBzB,EACEwC,EAAWpE,EAAaqE,QAC1B,IAAIF,aAA2B,EAAdd,QACjBzB,EACE0C,EAAatE,EAAauE,UAC5B,IAAIJ,aAA2B,EAAdd,QACjBzB,EACE4C,EAAKxE,EAAawE,GAAK,IAAIL,aAA2B,EAAdd,QAAmBzB,EAG3D6C,EAAS,IAAIf,MAAMd,GACnB8B,EAAS,IAAIhB,MAAMd,GACzB,IAAKP,EAAI,EAAGA,EAAIO,EAASP,IACvBoC,EAAOpC,GAAKtD,EAAI0D,EAAKJ,IACrBqC,EAAOrC,GAAKxD,EAAI4D,EAAKJ,IAIvB,MAAMsC,EAAW,IAAIjB,MAAMZ,GACrB8B,EAAW,IAAIlB,MAAMZ,GAC3B,IAAKR,EAAI,EAAGA,EAAIQ,EAAWR,IACzBsC,EAAStC,GAAKzD,EAAI6D,EAAOJ,IACzBqC,EAASrC,GAAKvD,EAAI2D,EAAOJ,IAI3B,IAAKD,EAAI,EAAGA,EAAIO,EAASP,IACvB,IAAKC,EAAI,EAAGA,EAAIQ,EAAWR,IACzBgB,EAAUd,KAAWpD,EAAM8C,EAAIuC,EAAOpC,GAAKuC,EAAStC,GACpDgB,EAAUd,KAAWpD,EAAM+C,EAAIsC,EAAOpC,GAAKsC,EAASrC,GACpDgB,EAAUd,KAAWpD,EAAMgD,EAAIsC,EAAOrC,GAK1C,IAqBIwC,EACAC,GAmCAC,GACAC,GA1DAC,GAAc5B,EAAc,EAChC,GAAIJ,EACF,IAAKZ,EAAI,EAAGA,EAAIO,EAASP,IACvB,IAAKC,EAAI,EAAGA,EAAIQ,EAAWR,IACzBgB,EAAUd,KAAWnD,EAAW6C,EAAIuC,EAAOpC,GAAKuC,EAAStC,GACzDgB,EAAUd,KAAWnD,EAAW8C,EAAIsC,EAAOpC,GAAKsC,EAASrC,GACzDgB,EAAUd,KAAWnD,EAAW+C,EAAIsC,EAAOrC,GAI3CmB,EAAQyB,KAAe,EACnB5C,EAAI,GAAKA,IAAMO,EAAU,GAAW,IAANN,GAAWA,IAAMQ,EAAY,IAC7Da,EAAasB,KAAe,GAE9BA,KASN,IAHAzC,EAAQ,EAGHH,EAAI,EAAGA,EAAIO,EAAU,EAAGP,IAI3B,IAHAwC,EAAYxC,EAAIS,EAChBgC,IAAgBzC,EAAI,GAAKS,EAEpBR,EAAI,EAAGA,EAAIQ,EAAY,EAAGR,IAC7BwB,EAAQtB,KAAWsC,GAAexC,EAClCwB,EAAQtB,KAAWsC,GAAexC,EAAI,EACtCwB,EAAQtB,KAAWqC,EAAYvC,EAAI,EAEnCwB,EAAQtB,KAAWsC,GAAexC,EAClCwB,EAAQtB,KAAWqC,EAAYvC,EAAI,EACnCwB,EAAQtB,KAAWqC,EAAYvC,EAKnC,GAAIW,EAAiB,CACnB,MAAMiC,EAAStC,EAAUE,EACzB,IAAKT,EAAI,EAAGA,EAAIO,EAAU,EAAGP,IAI3B,IAHAwC,EAAYK,EAAS7C,EAAIS,EACzBgC,GAAeI,GAAU7C,EAAI,GAAKS,EAE7BR,EAAI,EAAGA,EAAIQ,EAAY,EAAGR,IAC7BwB,EAAQtB,KAAWsC,GAAexC,EAClCwB,EAAQtB,KAAWqC,EAAYvC,EAC/BwB,EAAQtB,KAAWqC,EAAYvC,EAAI,EAEnCwB,EAAQtB,KAAWsC,GAAexC,EAClCwB,EAAQtB,KAAWqC,EAAYvC,EAAI,EACnCwB,EAAQtB,KAAWsC,GAAexC,EAAI,EAO5C,GAAIW,EAAiB,CACnB,GAAIC,EAGF,IADA8B,GAAcpC,EAAUE,EACnBT,EAAI,EAAGA,EAAIS,EAAY,EAAGT,IAC7ByB,EAAQtB,KAAWH,EACnByB,EAAQtB,KAAWH,EAAI,EACvByB,EAAQtB,KAAWwC,GAAc3C,EAAI,EAErCyB,EAAQtB,KAAWH,EACnByB,EAAQtB,KAAWwC,GAAc3C,EAAI,EACrCyB,EAAQtB,KAAWwC,GAAc3C,EAIrC,GAAIc,EAIF,IAFA4B,GAAcnC,EAAUE,EAAYA,EACpCkC,GAAcpC,EAAUE,EAAYE,EAAmBF,EAClDT,EAAI,EAAGA,EAAIS,EAAY,EAAGT,IAC7ByB,EAAQtB,KAAWuC,GAAc1C,EAAI,EACrCyB,EAAQtB,KAAWuC,GAAc1C,EACjCyB,EAAQtB,KAAWwC,GAAc3C,EAEjCyB,EAAQtB,KAAWuC,GAAc1C,EAAI,EACrCyB,EAAQtB,KAAWwC,GAAc3C,EACjCyB,EAAQtB,KAAWwC,GAAc3C,EAAI,EAM3C,GAAIe,EAAa,CACf,IAAKf,EAAI,EAAGA,EAAIO,EAAU,EAAGP,IAC3B2C,GAAclC,EAAYF,EAAUE,EAAYT,EAChD0C,GAAcjC,EAAYT,EAC1ByB,EAAQtB,KAAWwC,GACnBlB,EAAQtB,KAAWuC,GAAcjC,EACjCgB,EAAQtB,KAAWuC,GAEnBjB,EAAQtB,KAAWwC,GACnBlB,EAAQtB,KAAWwC,GAAclC,EACjCgB,EAAQtB,KAAWuC,GAAcjC,EAGnC,IAAKT,EAAI,EAAGA,EAAIO,EAAU,EAAGP,IAC3B2C,GAAclC,EAAYF,EAAUE,GAAaT,EAAI,GAAK,EAC1D0C,GAAcjC,GAAaT,EAAI,GAAK,EACpCyB,EAAQtB,KAAWuC,GAAcjC,EACjCgB,EAAQtB,KAAWwC,GACnBlB,EAAQtB,KAAWuC,GAEnBjB,EAAQtB,KAAWuC,GAAcjC,EACjCgB,EAAQtB,KAAWwC,GAAclC,EACjCgB,EAAQtB,KAAWwC,GAIvB,MAAMG,GAAa,IAAIC,EAAAA,mBAEnBpF,EAAaqF,WACfF,GAAWE,SAAW,IAAIC,oBAAkB,CAC1CC,kBAAmBC,EAAiBA,kBAACC,OACrCC,uBAAwB,EACxBC,OAAQrC,KAIZ,IAAIsC,GAAU,EACVC,GAAc,EACdC,GAAe,EACfC,GAAiB,EACrB,MAAMC,GAAkB3C,EAAc,EAEtC,IAAI4C,GACJ,MAAMC,GAAiBC,EAAAA,UAAUC,eAAehH,GAC1CiH,GAAiBF,EAAAA,UAAUC,eAAe/G,GAEhD,GACEW,EAAawE,IACbxE,EAAakE,QACblE,EAAaqE,SACbrE,EAAauE,UACb,CACA,IAAKlC,EAAI,EAAGA,EAAIgB,EAAahB,IAAK,CAChC4D,GAAYzC,EAAQnB,GAAKgE,GAAiBH,GAC1C,MAAMb,EAAW9G,EAAAA,WAAW+H,UAAUhD,EAAe,EAAJjB,EAAO/D,GAClD4F,EAAS+B,GAAUM,sBAAsBlB,EAAU7G,GAKzD,GAJImF,EAAatB,IACf9D,EAAAA,WAAWiI,OAAOtC,EAAQA,GAGxBlE,EAAawE,GAAI,CACnB,MAAMiC,EAAWC,EAAUA,WAACF,OAAOtC,EAAQvF,GAC3C6F,EAAGoB,MACD9G,KAAK6H,MAAMF,EAAStE,EAAGsE,EAASvE,GAAK1C,EAAAA,WAAWC,OAAS,GAC3D+E,EAAGoB,MAAa9G,KAAK8H,KAAK1C,EAAO9B,GAAKtD,KAAKc,GAAK,GASlD,GANII,EAAakE,SACfD,EAAQ4B,MAAiB3B,EAAOhC,EAChC+B,EAAQ4B,MAAiB3B,EAAO/B,EAChC8B,EAAQ4B,MAAiB3B,EAAO9B,GAG9BpC,EAAaqE,SAAWrE,EAAauE,UAAW,CAClD,MAAMF,EAAU5F,EAGhB,IACIoI,EADAC,EAAe,EAuBnB,GArBItD,EAAQnB,KACVyE,EAAed,IAOfa,GAJC3D,GACDb,GAAKyE,GACLzE,EAAIyE,EAA2B,EAAZhE,EAEZvE,EAAUA,WAACwI,OAEXxI,EAAUA,WAACyI,OAEpBzI,EAAAA,WAAW0I,MAAMJ,EAAM3C,EAAQG,GAC/B9F,EAAAA,WAAW2I,UAAU7C,EAASA,GAE1BrE,EAAaqE,UACfD,EAAS0B,MAAkBzB,EAAQnC,EACnCkC,EAAS0B,MAAkBzB,EAAQlC,EACnCiC,EAAS0B,MAAkBzB,EAAQjC,GAGjCpC,EAAauE,UAAW,CAC1B,MAAMA,EAAYhG,EAAAA,WAAW0I,MAAM/C,EAAQG,EAAS3F,GACpDH,EAAAA,WAAW2I,UAAU3C,EAAWA,GAEhCD,EAAWyB,MAAoBxB,EAAUrC,EACzCoC,EAAWyB,MAAoBxB,EAAUpC,EACzCmC,EAAWyB,MAAoBxB,EAAUnC,IAK3CpC,EAAawE,KACfW,GAAWX,GAAK,IAAIc,oBAAkB,CACpCC,kBAAmBC,EAAiBA,kBAAC2B,MACrCzB,uBAAwB,EACxBC,OAAQnB,KAIRxE,EAAakE,SACfiB,GAAWjB,OAAS,IAAIoB,oBAAkB,CACxCC,kBAAmBC,EAAiBA,kBAAC2B,MACrCzB,uBAAwB,EACxBC,OAAQ1B,KAIRjE,EAAaqE,UACfc,GAAWd,QAAU,IAAIiB,oBAAkB,CACzCC,kBAAmBC,EAAiBA,kBAAC2B,MACrCzB,uBAAwB,EACxBC,OAAQvB,KAIRpE,EAAauE,YACfY,GAAWZ,UAAY,IAAIe,oBAAkB,CAC3CC,kBAAmBC,EAAiBA,kBAAC2B,MACrCzB,uBAAwB,EACxBC,OAAQrB,KAKd,GAAI/C,EAAOA,QAACU,EAAkBlB,kBAAmB,CAC/C,MAAM8B,EAASS,EAAUT,OACnBuE,EAAc,IAAIC,WAAWxE,EAAS,GACtCyE,EACJrF,EAAkBlB,mBAAqBwG,EAAAA,wBAAwBC,KAC3D,EACA,EACN/D,YAAU2D,EAAaE,GACvBnC,GAAWiC,YAAc,IAAI9B,oBAAkB,CAC7CC,kBAAmBC,EAAiBA,kBAACiC,cACrC/B,uBAAwB,EACxBC,OAAQyB,IAIZ,OAAO,IAAIM,EAAAA,SAAS,CAClBvC,WAAYA,GACZrB,QAASA,EACT6D,cAAeC,EAAaA,cAACC,UAC7BC,eAAgBC,EAAAA,eAAeC,cAAc9B,IAC7ClF,gBAAiBiB,EAAkBlB,oBAYvC/B,EAAkBiJ,iBAAmB,WASnC,OARK1G,EAAAA,QAAQM,KACXA,EAAwB7C,EAAkBgD,eACxC,IAAIhD,EAAkB,CACpBI,MAAO,IAAIb,EAAUA,WAAC,EAAK,EAAK,GAChCyB,aAAcC,EAAYA,aAACiI,kBAI1BrG"}