{"version":3,"file":"createGeometry.js","sources":["../../../../Source/WorkersES6/createGeometry.js"],"sourcesContent":["/* global require */\r\nimport defined from \"../Core/defined.js\";\r\nimport PrimitivePipeline from \"../Scene/PrimitivePipeline.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nconst moduleCache = {};\r\n\r\nfunction getModule(moduleName) {\r\n  let module = moduleCache[moduleName];\r\n  if (!defined(module)) {\r\n    if (typeof exports === \"object\") {\r\n      // Use CommonJS-style require.\r\n      moduleCache[module] = module = require(`Workers/${moduleName}`);\r\n    } else {\r\n      // Use AMD-style require.\r\n      // in web workers, require is synchronous\r\n      require([`Workers/${moduleName}`], function (f) {\r\n        module = f;\r\n        moduleCache[module] = f;\r\n      });\r\n    }\r\n  }\r\n  return module;\r\n}\r\n\r\nfunction createGeometry(parameters, transferableObjects) {\r\n  const subTasks = parameters.subTasks;\r\n  const length = subTasks.length;\r\n  const resultsOrPromises = new Array(length);\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const task = subTasks[i];\r\n    const geometry = task.geometry;\r\n    const moduleName = task.moduleName;\r\n\r\n    if (defined(moduleName)) {\r\n      const createFunction = getModule(moduleName);\r\n      resultsOrPromises[i] = createFunction(geometry, task.offset);\r\n    } else {\r\n      //Already created geometry\r\n      resultsOrPromises[i] = geometry;\r\n    }\r\n  }\r\n\r\n  return Promise.all(resultsOrPromises).then(function (results) {\r\n    return PrimitivePipeline.packCreateGeometryResults(\r\n      results,\r\n      transferableObjects\r\n    );\r\n  });\r\n}\r\nexport default createTaskProcessorWorker(createGeometry);\r\n"],"names":["moduleCache","getModule","moduleName","module","defined","exports","require","f","createTaskProcessorWorker","parameters","transferableObjects","subTasks","length","resultsOrPromises","Array","i","task","geometry","createFunction","offset","Promise","all","then","results","PrimitivePipeline","packCreateGeometryResults"],"mappings":"0mBAKA,MAAMA,EAAc,GAEpB,SAASC,EAAUC,GACjB,IAAIC,EAASH,EAAYE,GAczB,OAbKE,EAAAA,QAAQD,KACY,iBAAZE,QAETL,EAAYG,GAAUA,EAASG,QAAQ,WAAWJ,KAIlDI,QAAQ,CAAC,WAAWJ,MAAe,SAAUK,GAC3CJ,EAASI,EACTP,EAAYG,GAAUI,MAIrBJ,SA6BMK,GA1Bf,SAAwBC,EAAYC,GAClC,MAAMC,EAAWF,EAAWE,SACtBC,EAASD,EAASC,OAClBC,EAAoB,IAAIC,MAAMF,GAEpC,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC/B,MAAMC,EAAOL,EAASI,GAChBE,EAAWD,EAAKC,SAChBf,EAAac,EAAKd,WAExB,GAAIE,EAAAA,QAAQF,GAAa,CACvB,MAAMgB,EAAiBjB,EAAUC,GACjCW,EAAkBE,GAAKG,EAAeD,EAAUD,EAAKG,aAGrDN,EAAkBE,GAAKE,EAI3B,OAAOG,QAAQC,IAAIR,GAAmBS,MAAK,SAAUC,GACnD,OAAOC,EAAiBA,kBAACC,0BACvBF,EACAb"}