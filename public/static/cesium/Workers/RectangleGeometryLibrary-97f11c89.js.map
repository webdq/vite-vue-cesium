{"version":3,"file":"RectangleGeometryLibrary-97f11c89.js","sources":["../../../../Source/Core/RectangleGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport GeographicProjection from \"./GeographicProjection.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix2 from \"./Matrix2.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\n\r\nconst cos = Math.cos;\r\nconst sin = Math.sin;\r\nconst sqrt = Math.sqrt;\r\n\r\n/**\r\n * @private\r\n */\r\nconst RectangleGeometryLibrary = {};\r\n\r\n/**\r\n * @private\r\n */\r\nRectangleGeometryLibrary.computePosition = function (\r\n  computedOptions,\r\n  ellipsoid,\r\n  computeST,\r\n  row,\r\n  col,\r\n  position,\r\n  st\r\n) {\r\n  const radiiSquared = ellipsoid.radiiSquared;\r\n  const nwCorner = computedOptions.nwCorner;\r\n  const rectangle = computedOptions.boundingRectangle;\r\n\r\n  let stLatitude =\r\n    nwCorner.latitude -\r\n    computedOptions.granYCos * row +\r\n    col * computedOptions.granXSin;\r\n  const cosLatitude = cos(stLatitude);\r\n  const nZ = sin(stLatitude);\r\n  const kZ = radiiSquared.z * nZ;\r\n\r\n  let stLongitude =\r\n    nwCorner.longitude +\r\n    row * computedOptions.granYSin +\r\n    col * computedOptions.granXCos;\r\n  const nX = cosLatitude * cos(stLongitude);\r\n  const nY = cosLatitude * sin(stLongitude);\r\n\r\n  const kX = radiiSquared.x * nX;\r\n  const kY = radiiSquared.y * nY;\r\n\r\n  const gamma = sqrt(kX * nX + kY * nY + kZ * nZ);\r\n\r\n  position.x = kX / gamma;\r\n  position.y = kY / gamma;\r\n  position.z = kZ / gamma;\r\n\r\n  if (computeST) {\r\n    const stNwCorner = computedOptions.stNwCorner;\r\n    if (defined(stNwCorner)) {\r\n      stLatitude =\r\n        stNwCorner.latitude -\r\n        computedOptions.stGranYCos * row +\r\n        col * computedOptions.stGranXSin;\r\n      stLongitude =\r\n        stNwCorner.longitude +\r\n        row * computedOptions.stGranYSin +\r\n        col * computedOptions.stGranXCos;\r\n\r\n      st.x = (stLongitude - computedOptions.stWest) * computedOptions.lonScalar;\r\n      st.y = (stLatitude - computedOptions.stSouth) * computedOptions.latScalar;\r\n    } else {\r\n      st.x = (stLongitude - rectangle.west) * computedOptions.lonScalar;\r\n      st.y = (stLatitude - rectangle.south) * computedOptions.latScalar;\r\n    }\r\n  }\r\n};\r\n\r\nconst rotationMatrixScratch = new Matrix2();\r\nlet nwCartesian = new Cartesian3();\r\nconst centerScratch = new Cartographic();\r\nlet centerCartesian = new Cartesian3();\r\nconst proj = new GeographicProjection();\r\n\r\nfunction getRotationOptions(\r\n  nwCorner,\r\n  rotation,\r\n  granularityX,\r\n  granularityY,\r\n  center,\r\n  width,\r\n  height\r\n) {\r\n  const cosRotation = Math.cos(rotation);\r\n  const granYCos = granularityY * cosRotation;\r\n  const granXCos = granularityX * cosRotation;\r\n\r\n  const sinRotation = Math.sin(rotation);\r\n  const granYSin = granularityY * sinRotation;\r\n  const granXSin = granularityX * sinRotation;\r\n\r\n  nwCartesian = proj.project(nwCorner, nwCartesian);\r\n\r\n  nwCartesian = Cartesian3.subtract(nwCartesian, centerCartesian, nwCartesian);\r\n  const rotationMatrix = Matrix2.fromRotation(rotation, rotationMatrixScratch);\r\n  nwCartesian = Matrix2.multiplyByVector(\r\n    rotationMatrix,\r\n    nwCartesian,\r\n    nwCartesian\r\n  );\r\n  nwCartesian = Cartesian3.add(nwCartesian, centerCartesian, nwCartesian);\r\n  nwCorner = proj.unproject(nwCartesian, nwCorner);\r\n\r\n  width -= 1;\r\n  height -= 1;\r\n\r\n  const latitude = nwCorner.latitude;\r\n  const latitude0 = latitude + width * granXSin;\r\n  const latitude1 = latitude - granYCos * height;\r\n  const latitude2 = latitude - granYCos * height + width * granXSin;\r\n\r\n  const north = Math.max(latitude, latitude0, latitude1, latitude2);\r\n  const south = Math.min(latitude, latitude0, latitude1, latitude2);\r\n\r\n  const longitude = nwCorner.longitude;\r\n  const longitude0 = longitude + width * granXCos;\r\n  const longitude1 = longitude + height * granYSin;\r\n  const longitude2 = longitude + height * granYSin + width * granXCos;\r\n\r\n  const east = Math.max(longitude, longitude0, longitude1, longitude2);\r\n  const west = Math.min(longitude, longitude0, longitude1, longitude2);\r\n\r\n  return {\r\n    north: north,\r\n    south: south,\r\n    east: east,\r\n    west: west,\r\n    granYCos: granYCos,\r\n    granYSin: granYSin,\r\n    granXCos: granXCos,\r\n    granXSin: granXSin,\r\n    nwCorner: nwCorner,\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nRectangleGeometryLibrary.computeOptions = function (\r\n  rectangle,\r\n  granularity,\r\n  rotation,\r\n  stRotation,\r\n  boundingRectangleScratch,\r\n  nwCornerResult,\r\n  stNwCornerResult\r\n) {\r\n  let east = rectangle.east;\r\n  let west = rectangle.west;\r\n  let north = rectangle.north;\r\n  let south = rectangle.south;\r\n\r\n  let northCap = false;\r\n  let southCap = false;\r\n\r\n  if (north === CesiumMath.PI_OVER_TWO) {\r\n    northCap = true;\r\n  }\r\n  if (south === -CesiumMath.PI_OVER_TWO) {\r\n    southCap = true;\r\n  }\r\n\r\n  let dx;\r\n  const dy = north - south;\r\n  if (west > east) {\r\n    dx = CesiumMath.TWO_PI - west + east;\r\n  } else {\r\n    dx = east - west;\r\n  }\r\n\r\n  const width = Math.ceil(dx / granularity) + 1;\r\n  const height = Math.ceil(dy / granularity) + 1;\r\n  const granularityX = dx / (width - 1);\r\n  const granularityY = dy / (height - 1);\r\n\r\n  const nwCorner = Rectangle.northwest(rectangle, nwCornerResult);\r\n  const center = Rectangle.center(rectangle, centerScratch);\r\n  if (rotation !== 0 || stRotation !== 0) {\r\n    if (center.longitude < nwCorner.longitude) {\r\n      center.longitude += CesiumMath.TWO_PI;\r\n    }\r\n    centerCartesian = proj.project(center, centerCartesian);\r\n  }\r\n\r\n  const granYCos = granularityY;\r\n  const granXCos = granularityX;\r\n  const granYSin = 0.0;\r\n  const granXSin = 0.0;\r\n\r\n  const boundingRectangle = Rectangle.clone(\r\n    rectangle,\r\n    boundingRectangleScratch\r\n  );\r\n\r\n  const computedOptions = {\r\n    granYCos: granYCos,\r\n    granYSin: granYSin,\r\n    granXCos: granXCos,\r\n    granXSin: granXSin,\r\n    nwCorner: nwCorner,\r\n    boundingRectangle: boundingRectangle,\r\n    width: width,\r\n    height: height,\r\n    northCap: northCap,\r\n    southCap: southCap,\r\n  };\r\n\r\n  if (rotation !== 0) {\r\n    const rotationOptions = getRotationOptions(\r\n      nwCorner,\r\n      rotation,\r\n      granularityX,\r\n      granularityY,\r\n      center,\r\n      width,\r\n      height\r\n    );\r\n    north = rotationOptions.north;\r\n    south = rotationOptions.south;\r\n    east = rotationOptions.east;\r\n    west = rotationOptions.west;\r\n\r\n    //>>includeStart('debug', pragmas.debug);\r\n    if (\r\n      north < -CesiumMath.PI_OVER_TWO ||\r\n      north > CesiumMath.PI_OVER_TWO ||\r\n      south < -CesiumMath.PI_OVER_TWO ||\r\n      south > CesiumMath.PI_OVER_TWO\r\n    ) {\r\n      throw new DeveloperError(\r\n        \"Rotated rectangle is invalid.  It crosses over either the north or south pole.\"\r\n      );\r\n    }\r\n    //>>includeEnd('debug')\r\n\r\n    computedOptions.granYCos = rotationOptions.granYCos;\r\n    computedOptions.granYSin = rotationOptions.granYSin;\r\n    computedOptions.granXCos = rotationOptions.granXCos;\r\n    computedOptions.granXSin = rotationOptions.granXSin;\r\n\r\n    boundingRectangle.north = north;\r\n    boundingRectangle.south = south;\r\n    boundingRectangle.east = east;\r\n    boundingRectangle.west = west;\r\n  }\r\n\r\n  if (stRotation !== 0) {\r\n    rotation = rotation - stRotation;\r\n    const stNwCorner = Rectangle.northwest(boundingRectangle, stNwCornerResult);\r\n\r\n    const stRotationOptions = getRotationOptions(\r\n      stNwCorner,\r\n      rotation,\r\n      granularityX,\r\n      granularityY,\r\n      center,\r\n      width,\r\n      height\r\n    );\r\n\r\n    computedOptions.stGranYCos = stRotationOptions.granYCos;\r\n    computedOptions.stGranXCos = stRotationOptions.granXCos;\r\n    computedOptions.stGranYSin = stRotationOptions.granYSin;\r\n    computedOptions.stGranXSin = stRotationOptions.granXSin;\r\n    computedOptions.stNwCorner = stNwCorner;\r\n    computedOptions.stWest = stRotationOptions.west;\r\n    computedOptions.stSouth = stRotationOptions.south;\r\n  }\r\n\r\n  return computedOptions;\r\n};\r\nexport default RectangleGeometryLibrary;\r\n"],"names":["cos","Math","sin","sqrt","RectangleGeometryLibrary","computedOptions","ellipsoid","computeST","row","col","position","st","radiiSquared","nwCorner","rectangle","boundingRectangle","stLatitude","latitude","granYCos","granXSin","cosLatitude","nZ","kZ","z","stLongitude","longitude","granYSin","granXCos","nX","nY","kX","x","kY","y","gamma","stNwCorner","defined","stGranYCos","stGranXSin","stGranYSin","stGranXCos","stWest","lonScalar","stSouth","latScalar","west","south","rotationMatrixScratch","Matrix2","nwCartesian","Cartesian3","centerScratch","Cartographic","centerCartesian","proj","GeographicProjection","getRotationOptions","rotation","granularityX","granularityY","center","width","height","cosRotation","sinRotation","project","subtract","rotationMatrix","fromRotation","multiplyByVector","add","unproject","latitude0","latitude1","latitude2","north","max","min","longitude0","longitude1","longitude2","east","computeOptions","granularity","stRotation","boundingRectangleScratch","nwCornerResult","stNwCornerResult","dx","northCap","southCap","CesiumMath","PI_OVER_TWO","dy","TWO_PI","ceil","Rectangle","northwest","clone","rotationOptions","DeveloperError","stRotationOptions"],"mappings":"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"}